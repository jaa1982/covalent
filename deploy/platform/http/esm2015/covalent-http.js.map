{
  "version": 3,
  "file": "covalent-http.js",
  "sources": [
    "ng://@covalent/http/out/http-rest.service.ts",
    "ng://@covalent/http/out/http.module.ts",
    "ng://@covalent/http/out/interceptors/url-regexp-interceptor-matcher.class.ts",
    "ng://@covalent/http/out/interceptors/http-interceptor.service.ts"
  ],
  "sourcesContent": [
    "import { Headers, RequestOptionsArgs, Response, Request } from '@angular/http';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Observable, Subscriber } from 'rxjs';\r\n\r\nexport interface IRestTransform {\r\n  (response: Response): any;\r\n}\r\n\r\nexport interface IRestConfig {\r\n  baseHeaders?: Headers;\r\n  dynamicHeaders?: () => Headers;\r\n  baseUrl: string;\r\n  path?: string;\r\n  transform?: IRestTransform;\r\n}\r\n\r\nexport interface IRestQuery {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface IHttp {\r\n  delete: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\r\n  get: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\r\n  head: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\r\n  patch: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\r\n  post: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\r\n  put: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\r\n  request: (url: string | Request, options?: RequestOptionsArgs) => Observable<Response>;\r\n}\r\n\r\nexport abstract class RESTService<T> {\r\n\r\n  private _path: string;\r\n  private _base: string;\r\n  private _baseHeaders: Headers;\r\n  private _dynamicHeaders: () => Headers;\r\n\r\n  protected transform: IRestTransform;\r\n  protected http: IHttp;\r\n\r\n  constructor(http: IHttp, config: IRestConfig) {\r\n    this.http = http;\r\n    this._base = config.baseUrl.replace(/\\/$/, '');\r\n    this._path = config.path.replace(/^\\//, '');\r\n    this._baseHeaders = config.baseHeaders ? config.baseHeaders : new Headers();\r\n    this._dynamicHeaders = config.dynamicHeaders ? config.dynamicHeaders : () => new Headers();\r\n    this.transform = config.transform ? config.transform : (response: Response): any => response.json();\r\n  }\r\n\r\n  public query(query?: IRestQuery, transform?: IRestTransform): Observable<any> {\r\n    let request: Observable<Response> = this.http.get(this.buildUrl(undefined, query), this.buildRequestOptions());\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (transform) {\r\n          return transform(res);\r\n        }\r\n        return this.transform(res);\r\n      }),\r\n    );\r\n  }\r\n\r\n  public get(id: string | number, transform?: IRestTransform): Observable<any> {\r\n    let request: Observable<Response> = this.http.get(this.buildUrl(id), this.buildRequestOptions());\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (transform) {\r\n          return transform(res);\r\n        }\r\n        return this.transform(res);\r\n      }),\r\n    );\r\n  }\r\n\r\n  public create(obj: T, transform?: IRestTransform): Observable<any> {\r\n    let requestOptions: RequestOptionsArgs = this.buildRequestOptions();\r\n    let request: Observable<Response> = this.http.post(this.buildUrl(), obj, requestOptions);\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (res.status === 201) {\r\n          if (transform) {\r\n            return transform(res);\r\n          }\r\n          return this.transform(res);\r\n        } else {\r\n          return res;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  public update(id: string | number, obj: T, transform?: IRestTransform): Observable<any> {\r\n    let requestOptions: RequestOptionsArgs = this.buildRequestOptions();\r\n    let request: Observable<Response> = this.http.patch(this.buildUrl(id), obj, requestOptions);\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (res.status === 200) {\r\n          if (transform) {\r\n            return transform(res);\r\n          }\r\n          return this.transform(res);\r\n        } else {\r\n          return res;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  public delete(id: string | number, transform?: IRestTransform): Observable<any> {\r\n    let request: Observable<Response> = this.http.delete(this.buildUrl(id), this.buildRequestOptions());\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (res.status === 200) {\r\n          if (transform) {\r\n            return transform(res);\r\n          }\r\n          return this.transform(res);\r\n        } else {\r\n          return res;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  protected buildRequestOptions(): RequestOptionsArgs {\r\n    let requestHeaders: Headers = new Headers();\r\n    this._baseHeaders.forEach((value: string[], key: string) => {\r\n      requestHeaders.set(key, value);\r\n    });\r\n    this._dynamicHeaders().forEach((value: string[], key: string) => {\r\n      requestHeaders.set(key, value);\r\n    });\r\n    let requestOptions: RequestOptionsArgs = {\r\n      headers: requestHeaders,\r\n    };\r\n    return requestOptions;\r\n  }\r\n\r\n  protected buildUrl(id?: string | number, query?: IRestQuery): string {\r\n    let url: string = this._path ? this._path : '';\r\n    if (id) {\r\n      url += `/${id}`;\r\n    }\r\n    if (query) {\r\n      url += this.buildQuery(query);\r\n    }\r\n    url = `${this._base}/${url}`;\r\n    return url;\r\n  }\r\n\r\n  protected buildQuery(query: IRestQuery): string {\r\n    let url: string = '';\r\n    if (query) {\r\n      url += '?';\r\n      let params: string[] = [];\r\n      for (let key in query) {\r\n        let value: string | number | boolean = query[key];\r\n        if (value !== undefined) {\r\n          params.push(`${key}=${value}`);\r\n        }\r\n      }\r\n      url += params.join('&');\r\n    }\r\n    return url;\r\n  }\r\n}\r\n",
    "import { NgModule, ModuleWithProviders, Injector, InjectionToken, Provider } from '@angular/core';\r\nimport { HttpModule, Http } from '@angular/http';\r\n\r\nimport { HttpInterceptorService, IHttpInterceptorConfig } from './interceptors/http-interceptor.service';\r\nimport { URLRegExpInterceptorMatcher } from './interceptors/url-regexp-interceptor-matcher.class';\r\n\r\nexport const HTTP_CONFIG: InjectionToken<HttpConfig> = new InjectionToken<HttpConfig>('HTTP_CONFIG');\r\n\r\nexport type HttpConfig = {interceptors: IHttpInterceptorConfig[]};\r\n\r\nexport function httpFactory(http: Http, injector: Injector, config: HttpConfig): HttpInterceptorService {\r\n  return new HttpInterceptorService(http, injector, new URLRegExpInterceptorMatcher(), config.interceptors);\r\n}\r\n\r\nexport const HTTP_INTERCEPTOR_PROVIDER: Provider = {\r\n  provide: HttpInterceptorService,\r\n  useFactory: httpFactory,\r\n  deps: [Http, Injector, HTTP_CONFIG],\r\n};\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpModule,\r\n  ],\r\n})\r\nexport class CovalentHttpModule {\r\n  static forRoot(config: HttpConfig = {interceptors: []}): ModuleWithProviders {\r\n    return {\r\n      ngModule: CovalentHttpModule,\r\n      providers: [{\r\n          provide: HTTP_CONFIG,\r\n          useValue: config,\r\n        },\r\n        HTTP_INTERCEPTOR_PROVIDER,\r\n      ],\r\n    };\r\n  }\r\n}\r\n",
    "import { RequestOptionsArgs } from '@angular/http';\r\n\r\nimport { IHttpInterceptorMapping } from './http-interceptor-mapping.interface';\r\nimport { IHttpInterceptorMatcher } from './http-interceptor-matcher.interface';\r\n\r\n/**\r\n * Concrete implementation for http interceptor matchers.\r\n * This implementation uses regex to check mapping paths vs request url.\r\n */\r\nexport class URLRegExpInterceptorMatcher implements IHttpInterceptorMatcher {\r\n\r\n  matches(options: RequestOptionsArgs, mapping: IHttpInterceptorMapping): boolean {\r\n    return mapping.paths.filter((path: string) => {\r\n      path = path.replace(/\\*\\*/gi, '<>')\r\n                .replace(/\\*/gi, '[a-zA-Z0-9\\\\-_]+')\r\n                .replace(/<>/gi, '[a-zA-Z0-9\\\\-_\\/]*');\r\n      if (path) {\r\n        path += '(\\\\?{1}.*)?$';\r\n        return new RegExp(path).test(options.url);\r\n      }\r\n      return false;\r\n    }).length > 0;\r\n  }\r\n\r\n}\r\n",
    "import { Injectable, Type, Injector } from '@angular/core';\r\nimport { Http, RequestOptionsArgs, Response, Request, RequestMethod } from '@angular/http';\r\n\r\nimport { Observable, Subscriber } from 'rxjs';\r\n\r\nimport { IHttpInterceptor } from './http-interceptor.interface';\r\nimport { IHttpInterceptorMatcher } from './http-interceptor-matcher.interface';\r\nimport { IHttpInterceptorMapping } from './http-interceptor-mapping.interface';\r\n\r\nexport interface IHttpInterceptorConfig {\r\n  interceptor: Type<any>;\r\n  paths: string[];\r\n}\r\n\r\nexport class HttpInterceptorService {\r\n\r\n  private _requestInterceptors: IHttpInterceptorMapping[] = [];\r\n\r\n  constructor(private _http: Http,\r\n              private _injector: Injector,\r\n              private _httpInterceptorMatcher: IHttpInterceptorMatcher,\r\n              requestInterceptorConfigs: IHttpInterceptorConfig[]) {\r\n    requestInterceptorConfigs.forEach((config: IHttpInterceptorConfig) => {\r\n      this._requestInterceptors.push({\r\n        interceptor: <IHttpInterceptor>_injector.get(config.interceptor),\r\n        paths: config.paths,\r\n      });\r\n    });\r\n  }\r\n\r\n  public delete(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Delete;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public get(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Get;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public head(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Head;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public patch(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Patch;\r\n    requestOptions.body = data;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public post(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Post;\r\n    requestOptions.body = data;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public put(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Put;\r\n    requestOptions.body = data;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public request(url: string | Request, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    let requestUrl: string;\r\n    if (url instanceof Request) {\r\n      requestUrl = url.url ? url.url : requestOptions.url;\r\n    } else {\r\n      requestUrl = url;\r\n    }\r\n    if (!requestOptions.url) {\r\n      requestOptions.url = requestUrl;\r\n    }\r\n    let interceptors: IHttpInterceptor[] = this._requestInterceptors.filter((mapping: IHttpInterceptorMapping) => {\r\n      return this._httpInterceptorMatcher.matches(requestOptions, mapping);\r\n    }).map((mapping: IHttpInterceptorMapping) => {\r\n      return mapping.interceptor;\r\n    });\r\n    return this._setupRequest(url, requestOptions, interceptors);\r\n  }\r\n\r\n  private _setupRequest(url: string | Request,\r\n                        requestOptions: RequestOptionsArgs,\r\n                        interceptors: IHttpInterceptor[]): Observable<Response> {\r\n    try {\r\n      requestOptions = this._requestResolve(requestOptions, interceptors);\r\n    } catch (e) {\r\n      return new Observable<any>((subscriber: Subscriber<any>) => {\r\n        subscriber.error(e);\r\n      });\r\n    }\r\n    return new Observable<any>((subscriber: Subscriber<any>) => {\r\n      this._http.request(url, requestOptions)\r\n      .subscribe((response: Response) => {\r\n        subscriber.next(this._responseResolve(response, interceptors));\r\n        subscriber.complete();\r\n      }, (error: Response) => {\r\n        subscriber.error(this._responseErrorResolve(error, interceptors));\r\n      });\r\n    });\r\n  }\r\n\r\n  private _requestResolve(requestOptions: RequestOptionsArgs, interceptors: IHttpInterceptor[]): RequestOptionsArgs {\r\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\r\n      if (interceptor.onRequest) {\r\n        try {\r\n          requestOptions = interceptor.onRequest(requestOptions);\r\n        } catch (e) {\r\n          if (interceptor.onRequestError) {\r\n            requestOptions = interceptor.onRequestError(requestOptions);\r\n            if (!requestOptions) {\r\n              throw e;\r\n            }\r\n          } else {\r\n            throw e;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return requestOptions;\r\n  }\r\n\r\n  private _responseResolve(response: Response, interceptors: IHttpInterceptor[]): Response {\r\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\r\n      if (interceptor.onResponse) {\r\n        response = interceptor.onResponse(response);\r\n      }\r\n    });\r\n    return response;\r\n  }\r\n\r\n  private _responseErrorResolve(error: Response, interceptors: IHttpInterceptor[]): Response {\r\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\r\n      if (interceptor.onResponseError) {\r\n        error = interceptor.onResponseError(error);\r\n      }\r\n    });\r\n    return error;\r\n  }\r\n\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
