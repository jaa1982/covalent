{
  "version": 3,
  "file": "covalent-http.umd.min.js",
  "sources": [
    "ng://@covalent/http/out/interceptors/http-interceptor.service.ts",
    "ng://@covalent/http/out/interceptors/url-regexp-interceptor-matcher.class.ts",
    "ng://@covalent/http/out/http.module.ts",
    "ng://@covalent/http/out/http-rest.service.ts"
  ],
  "sourcesContent": [
    "import { Injectable, Type, Injector } from '@angular/core';\r\nimport { Http, RequestOptionsArgs, Response, Request, RequestMethod } from '@angular/http';\r\n\r\nimport { Observable, Subscriber } from 'rxjs';\r\n\r\nimport { IHttpInterceptor } from './http-interceptor.interface';\r\nimport { IHttpInterceptorMatcher } from './http-interceptor-matcher.interface';\r\nimport { IHttpInterceptorMapping } from './http-interceptor-mapping.interface';\r\n\r\nexport interface IHttpInterceptorConfig {\r\n  interceptor: Type<any>;\r\n  paths: string[];\r\n}\r\n\r\nexport class HttpInterceptorService {\r\n\r\n  private _requestInterceptors: IHttpInterceptorMapping[] = [];\r\n\r\n  constructor(private _http: Http,\r\n              private _injector: Injector,\r\n              private _httpInterceptorMatcher: IHttpInterceptorMatcher,\r\n              requestInterceptorConfigs: IHttpInterceptorConfig[]) {\r\n    requestInterceptorConfigs.forEach((config: IHttpInterceptorConfig) => {\r\n      this._requestInterceptors.push({\r\n        interceptor: <IHttpInterceptor>_injector.get(config.interceptor),\r\n        paths: config.paths,\r\n      });\r\n    });\r\n  }\r\n\r\n  public delete(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Delete;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public get(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Get;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public head(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Head;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public patch(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Patch;\r\n    requestOptions.body = data;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public post(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Post;\r\n    requestOptions.body = data;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public put(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    requestOptions.url = url;\r\n    requestOptions.method = RequestMethod.Put;\r\n    requestOptions.body = data;\r\n    return this.request(url, requestOptions);\r\n  }\r\n\r\n  public request(url: string | Request, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\r\n    let requestUrl: string;\r\n    if (url instanceof Request) {\r\n      requestUrl = url.url ? url.url : requestOptions.url;\r\n    } else {\r\n      requestUrl = url;\r\n    }\r\n    if (!requestOptions.url) {\r\n      requestOptions.url = requestUrl;\r\n    }\r\n    let interceptors: IHttpInterceptor[] = this._requestInterceptors.filter((mapping: IHttpInterceptorMapping) => {\r\n      return this._httpInterceptorMatcher.matches(requestOptions, mapping);\r\n    }).map((mapping: IHttpInterceptorMapping) => {\r\n      return mapping.interceptor;\r\n    });\r\n    return this._setupRequest(url, requestOptions, interceptors);\r\n  }\r\n\r\n  private _setupRequest(url: string | Request,\r\n                        requestOptions: RequestOptionsArgs,\r\n                        interceptors: IHttpInterceptor[]): Observable<Response> {\r\n    try {\r\n      requestOptions = this._requestResolve(requestOptions, interceptors);\r\n    } catch (e) {\r\n      return new Observable<any>((subscriber: Subscriber<any>) => {\r\n        subscriber.error(e);\r\n      });\r\n    }\r\n    return new Observable<any>((subscriber: Subscriber<any>) => {\r\n      this._http.request(url, requestOptions)\r\n      .subscribe((response: Response) => {\r\n        subscriber.next(this._responseResolve(response, interceptors));\r\n        subscriber.complete();\r\n      }, (error: Response) => {\r\n        subscriber.error(this._responseErrorResolve(error, interceptors));\r\n      });\r\n    });\r\n  }\r\n\r\n  private _requestResolve(requestOptions: RequestOptionsArgs, interceptors: IHttpInterceptor[]): RequestOptionsArgs {\r\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\r\n      if (interceptor.onRequest) {\r\n        try {\r\n          requestOptions = interceptor.onRequest(requestOptions);\r\n        } catch (e) {\r\n          if (interceptor.onRequestError) {\r\n            requestOptions = interceptor.onRequestError(requestOptions);\r\n            if (!requestOptions) {\r\n              throw e;\r\n            }\r\n          } else {\r\n            throw e;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return requestOptions;\r\n  }\r\n\r\n  private _responseResolve(response: Response, interceptors: IHttpInterceptor[]): Response {\r\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\r\n      if (interceptor.onResponse) {\r\n        response = interceptor.onResponse(response);\r\n      }\r\n    });\r\n    return response;\r\n  }\r\n\r\n  private _responseErrorResolve(error: Response, interceptors: IHttpInterceptor[]): Response {\r\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\r\n      if (interceptor.onResponseError) {\r\n        error = interceptor.onResponseError(error);\r\n      }\r\n    });\r\n    return error;\r\n  }\r\n\r\n}\r\n",
    "import { RequestOptionsArgs } from '@angular/http';\r\n\r\nimport { IHttpInterceptorMapping } from './http-interceptor-mapping.interface';\r\nimport { IHttpInterceptorMatcher } from './http-interceptor-matcher.interface';\r\n\r\n/**\r\n * Concrete implementation for http interceptor matchers.\r\n * This implementation uses regex to check mapping paths vs request url.\r\n */\r\nexport class URLRegExpInterceptorMatcher implements IHttpInterceptorMatcher {\r\n\r\n  matches(options: RequestOptionsArgs, mapping: IHttpInterceptorMapping): boolean {\r\n    return mapping.paths.filter((path: string) => {\r\n      path = path.replace(/\\*\\*/gi, '<>')\r\n                .replace(/\\*/gi, '[a-zA-Z0-9\\\\-_]+')\r\n                .replace(/<>/gi, '[a-zA-Z0-9\\\\-_\\/]*');\r\n      if (path) {\r\n        path += '(\\\\?{1}.*)?$';\r\n        return new RegExp(path).test(options.url);\r\n      }\r\n      return false;\r\n    }).length > 0;\r\n  }\r\n\r\n}\r\n",
    "import { NgModule, ModuleWithProviders, Injector, InjectionToken, Provider } from '@angular/core';\r\nimport { HttpModule, Http } from '@angular/http';\r\n\r\nimport { HttpInterceptorService, IHttpInterceptorConfig } from './interceptors/http-interceptor.service';\r\nimport { URLRegExpInterceptorMatcher } from './interceptors/url-regexp-interceptor-matcher.class';\r\n\r\nexport const HTTP_CONFIG: InjectionToken<HttpConfig> = new InjectionToken<HttpConfig>('HTTP_CONFIG');\r\n\r\nexport type HttpConfig = {interceptors: IHttpInterceptorConfig[]};\r\n\r\nexport function httpFactory(http: Http, injector: Injector, config: HttpConfig): HttpInterceptorService {\r\n  return new HttpInterceptorService(http, injector, new URLRegExpInterceptorMatcher(), config.interceptors);\r\n}\r\n\r\nexport const HTTP_INTERCEPTOR_PROVIDER: Provider = {\r\n  provide: HttpInterceptorService,\r\n  useFactory: httpFactory,\r\n  deps: [Http, Injector, HTTP_CONFIG],\r\n};\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpModule,\r\n  ],\r\n})\r\nexport class CovalentHttpModule {\r\n  static forRoot(config: HttpConfig = {interceptors: []}): ModuleWithProviders {\r\n    return {\r\n      ngModule: CovalentHttpModule,\r\n      providers: [{\r\n          provide: HTTP_CONFIG,\r\n          useValue: config,\r\n        },\r\n        HTTP_INTERCEPTOR_PROVIDER,\r\n      ],\r\n    };\r\n  }\r\n}\r\n",
    "import { Headers, RequestOptionsArgs, Response, Request } from '@angular/http';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Observable, Subscriber } from 'rxjs';\r\n\r\nexport interface IRestTransform {\r\n  (response: Response): any;\r\n}\r\n\r\nexport interface IRestConfig {\r\n  baseHeaders?: Headers;\r\n  dynamicHeaders?: () => Headers;\r\n  baseUrl: string;\r\n  path?: string;\r\n  transform?: IRestTransform;\r\n}\r\n\r\nexport interface IRestQuery {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface IHttp {\r\n  delete: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\r\n  get: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\r\n  head: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\r\n  patch: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\r\n  post: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\r\n  put: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\r\n  request: (url: string | Request, options?: RequestOptionsArgs) => Observable<Response>;\r\n}\r\n\r\nexport abstract class RESTService<T> {\r\n\r\n  private _path: string;\r\n  private _base: string;\r\n  private _baseHeaders: Headers;\r\n  private _dynamicHeaders: () => Headers;\r\n\r\n  protected transform: IRestTransform;\r\n  protected http: IHttp;\r\n\r\n  constructor(http: IHttp, config: IRestConfig) {\r\n    this.http = http;\r\n    this._base = config.baseUrl.replace(/\\/$/, '');\r\n    this._path = config.path.replace(/^\\//, '');\r\n    this._baseHeaders = config.baseHeaders ? config.baseHeaders : new Headers();\r\n    this._dynamicHeaders = config.dynamicHeaders ? config.dynamicHeaders : () => new Headers();\r\n    this.transform = config.transform ? config.transform : (response: Response): any => response.json();\r\n  }\r\n\r\n  public query(query?: IRestQuery, transform?: IRestTransform): Observable<any> {\r\n    let request: Observable<Response> = this.http.get(this.buildUrl(undefined, query), this.buildRequestOptions());\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (transform) {\r\n          return transform(res);\r\n        }\r\n        return this.transform(res);\r\n      }),\r\n    );\r\n  }\r\n\r\n  public get(id: string | number, transform?: IRestTransform): Observable<any> {\r\n    let request: Observable<Response> = this.http.get(this.buildUrl(id), this.buildRequestOptions());\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (transform) {\r\n          return transform(res);\r\n        }\r\n        return this.transform(res);\r\n      }),\r\n    );\r\n  }\r\n\r\n  public create(obj: T, transform?: IRestTransform): Observable<any> {\r\n    let requestOptions: RequestOptionsArgs = this.buildRequestOptions();\r\n    let request: Observable<Response> = this.http.post(this.buildUrl(), obj, requestOptions);\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (res.status === 201) {\r\n          if (transform) {\r\n            return transform(res);\r\n          }\r\n          return this.transform(res);\r\n        } else {\r\n          return res;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  public update(id: string | number, obj: T, transform?: IRestTransform): Observable<any> {\r\n    let requestOptions: RequestOptionsArgs = this.buildRequestOptions();\r\n    let request: Observable<Response> = this.http.patch(this.buildUrl(id), obj, requestOptions);\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (res.status === 200) {\r\n          if (transform) {\r\n            return transform(res);\r\n          }\r\n          return this.transform(res);\r\n        } else {\r\n          return res;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  public delete(id: string | number, transform?: IRestTransform): Observable<any> {\r\n    let request: Observable<Response> = this.http.delete(this.buildUrl(id), this.buildRequestOptions());\r\n    return request.pipe(\r\n      catchError((error: Response) => {\r\n        return new Observable<any>((subscriber: Subscriber<any>) => {\r\n          try {\r\n            subscriber.error(this.transform(error));\r\n          } catch (err) {\r\n            subscriber.error(error);\r\n          }\r\n        });\r\n      }),\r\n      map((res: Response) => {\r\n        if (res.status === 200) {\r\n          if (transform) {\r\n            return transform(res);\r\n          }\r\n          return this.transform(res);\r\n        } else {\r\n          return res;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  protected buildRequestOptions(): RequestOptionsArgs {\r\n    let requestHeaders: Headers = new Headers();\r\n    this._baseHeaders.forEach((value: string[], key: string) => {\r\n      requestHeaders.set(key, value);\r\n    });\r\n    this._dynamicHeaders().forEach((value: string[], key: string) => {\r\n      requestHeaders.set(key, value);\r\n    });\r\n    let requestOptions: RequestOptionsArgs = {\r\n      headers: requestHeaders,\r\n    };\r\n    return requestOptions;\r\n  }\r\n\r\n  protected buildUrl(id?: string | number, query?: IRestQuery): string {\r\n    let url: string = this._path ? this._path : '';\r\n    if (id) {\r\n      url += `/${id}`;\r\n    }\r\n    if (query) {\r\n      url += this.buildQuery(query);\r\n    }\r\n    url = `${this._base}/${url}`;\r\n    return url;\r\n  }\r\n\r\n  protected buildQuery(query: IRestQuery): string {\r\n    let url: string = '';\r\n    if (query) {\r\n      url += '?';\r\n      let params: string[] = [];\r\n      for (let key in query) {\r\n        let value: string | number | boolean = query[key];\r\n        if (value !== undefined) {\r\n          params.push(`${key}=${value}`);\r\n        }\r\n      }\r\n      url += params.join('&');\r\n    }\r\n    return url;\r\n  }\r\n}\r\n"
  ],
  "names": [
    "HttpInterceptorService",
    "_http",
    "_injector",
    "_httpInterceptorMatcher",
    "requestInterceptorConfigs",
    "_this",
    "this",
    "_requestInterceptors",
    "forEach",
    "config",
    "push",
    "interceptor",
    "get",
    "paths",
    "prototype",
    "delete",
    "url",
    "requestOptions",
    "method",
    "RequestMethod",
    "Delete",
    "request",
    "Get",
    "head",
    "Head",
    "patch",
    "data",
    "Patch",
    "body",
    "post",
    "Post",
    "put",
    "Put",
    "requestUrl",
    "Request",
    "interceptors",
    "filter",
    "mapping",
    "matches",
    "map",
    "_setupRequest",
    "_requestResolve",
    "e",
    "Observable",
    "subscriber",
    "error",
    "subscribe",
    "response",
    "next",
    "_responseResolve",
    "complete",
    "_responseErrorResolve",
    "onRequest",
    "onRequestError",
    "onResponse",
    "onResponseError",
    "URLRegExpInterceptorMatcher",
    "options",
    "path",
    "replace",
    "RegExp",
    "test",
    "length",
    "HTTP_CONFIG",
    "InjectionToken",
    "httpFactory",
    "http",
    "injector",
    "HTTP_INTERCEPTOR_PROVIDER",
    "provide",
    "useFactory",
    "deps",
    "Http",
    "Injector",
    "CovalentHttpModule",
    "forRoot",
    "ngModule",
    "providers",
    "useValue",
    "type",
    "NgModule",
    "args",
    "imports",
    "HttpModule",
    "RESTService",
    "_base",
    "baseUrl",
    "_path",
    "_baseHeaders",
    "baseHeaders",
    "Headers",
    "_dynamicHeaders",
    "dynamicHeaders",
    "transform",
    "json",
    "query",
    "buildUrl",
    "undefined",
    "buildRequestOptions",
    "pipe",
    "catchError",
    "err",
    "res",
    "id",
    "create",
    "obj",
    "status",
    "update",
    "requestHeaders",
    "value",
    "key",
    "set",
    "headers",
    "buildQuery",
    "params",
    "join"
  ],
  "mappings": "8bAcA,IAAAA,EAAA,WAIE,SAAFA,EAAsBC,EACAC,EACAC,EACRC,GAHZ,IAAFC,EAAAC,KAAsBA,KAAtBL,MAAsBA,EACAK,KAAtBJ,UAAsBA,EACAI,KAAtBH,wBAAsBA,EAJtBG,KAAAC,qBAA4D,GAMxDH,EAA0BI,QAAQ,SAACC,GACjCJ,EAAKE,qBAAqBG,KAAK,CAC7BC,YAA+BT,EAAUU,IAAIH,EAAOE,aACpDE,MAAOJ,EAAOI,UAyHtB,OApHSb,EAATc,UAAAC,UAAS,SAAOC,EAAaC,GAGzB,YAHJ,IAAAA,IAA6BA,EAA7B,IACIA,EAAeD,IAAMA,EACrBC,EAAeC,OAASC,EAAAA,cAAcC,OAC/Bd,KAAKe,QAAQL,EAAKC,IAGpBjB,EAATc,UAAAF,IAAS,SAAII,EAAaC,GAGtB,YAHJ,IAAAA,IAA0BA,EAA1B,IACIA,EAAeD,IAAMA,EACrBC,EAAeC,OAASC,EAAAA,cAAcG,IAC/BhB,KAAKe,QAAQL,EAAKC,IAGpBjB,EAATc,UAAAS,KAAS,SAAKP,EAAaC,GAGvB,YAHJ,IAAAA,IAA2BA,EAA3B,IACIA,EAAeD,IAAMA,EACrBC,EAAeC,OAASC,EAAAA,cAAcK,KAC/BlB,KAAKe,QAAQL,EAAKC,IAGpBjB,EAATc,UAAAW,MAAS,SAAMT,EAAaU,EAAWT,GAInC,YAJJ,IAAAA,IAAuCA,EAAvC,IACIA,EAAeD,IAAMA,EACrBC,EAAeC,OAASC,EAAAA,cAAcQ,MACtCV,EAAeW,KAAOF,EACfpB,KAAKe,QAAQL,EAAKC,IAGpBjB,EAATc,UAAAe,KAAS,SAAKb,EAAaU,EAAWT,GAIlC,YAJJ,IAAAA,IAAsCA,EAAtC,IACIA,EAAeD,IAAMA,EACrBC,EAAeC,OAASC,EAAAA,cAAcW,KACtCb,EAAeW,KAAOF,EACfpB,KAAKe,QAAQL,EAAKC,IAGpBjB,EAATc,UAAAiB,IAAS,SAAIf,EAAaU,EAAWT,GAIjC,YAJJ,IAAAA,IAAqCA,EAArC,IACIA,EAAeD,IAAMA,EACrBC,EAAeC,OAASC,EAAAA,cAAca,IACtCf,EAAeW,KAAOF,EACfpB,KAAKe,QAAQL,EAAKC,IAGpBjB,EAATc,UAAAO,QAAS,SAAQL,EAAuBC,GAA/B,IACDgB,EADR5B,EAAAC,UAAA,IAAAW,IAAwCA,EAAxC,IAGMgB,EADEjB,aAAekB,EAAAA,QACJlB,EAAIA,IAAMA,EAAIA,IAAMC,EAAeD,IAEnCA,EAEVC,EAAeD,MAClBC,EAAeD,IAAMiB,GAEvB,IAAIE,EAAmC7B,KAAKC,qBAAqB6B,OAAO,SAACC,GACvE,OAAOhC,EAAKF,wBAAwBmC,QAAQrB,EAAgBoB,KAC3DE,IAAI,SAACF,GACN,OAAOA,EAAQ1B,cAEjB,OAAOL,KAAKkC,cAAcxB,EAAKC,EAAgBkB,IAGzCnC,EAAVc,UAAA0B,cAAU,SAAcxB,EACAC,EACAkB,GAFd,IAAV9B,EAAAC,KAGI,IACEW,EAAiBX,KAAKmC,gBAAgBxB,EAAgBkB,GACtD,MAAOO,GACP,OAAO,IAAIC,EAAAA,WAAgB,SAACC,GAC1BA,EAAWC,MAAMH,KAGrB,OAAO,IAAIC,EAAAA,WAAgB,SAACC,GAC1BvC,EAAKJ,MAAMoB,QAAQL,EAAKC,GACvB6B,UAAU,SAACC,GACVH,EAAWI,KAAK3C,EAAK4C,iBAAiBF,EAAUZ,IAChDS,EAAWM,YACV,SAACL,GACFD,EAAWC,MAAMxC,EAAK8C,sBAAsBN,EAAOV,SAKjDnC,EAAVc,UAAA2B,gBAAU,SAAgBxB,EAAoCkB,GAiB1D,OAhBAA,EAAa3B,QAAQ,SAACG,GACpB,GAAIA,EAAYyC,UACd,IACEnC,EAAiBN,EAAYyC,UAAUnC,GACvC,MAAOyB,GACP,IAAI/B,EAAY0C,eAMd,MAAMX,EAJN,KADAzB,EAAiBN,EAAY0C,eAAepC,IAE1C,MAAMyB,KAQTzB,GAGDjB,EAAVc,UAAAmC,iBAAU,SAAiBF,EAAoBZ,GAM3C,OALAA,EAAa3B,QAAQ,SAACG,GAChBA,EAAY2C,aACdP,EAAWpC,EAAY2C,WAAWP,MAG/BA,GAGD/C,EAAVc,UAAAqC,sBAAU,SAAsBN,EAAiBV,GAM7C,OALAA,EAAa3B,QAAQ,SAACG,GAChBA,EAAY4C,kBACdV,EAAQlC,EAAY4C,gBAAgBV,MAGjCA,GAGX7C,EApIA,GCLAwD,EAAA,WAAA,SAAAA,KAeA,OAbEA,EAAF1C,UAAAwB,QAAE,SAAQmB,EAA6BpB,GACnC,OASY,EATLA,EAAQxB,MAAMuB,OAAO,SAACsB,GAI3B,SAHAA,EAAOA,EAAKC,QAAQ,SAAU,MACnBA,QAAQ,OAAQ,oBAChBA,QAAQ,OAAQ,wBAEzBD,GAAQ,eACD,IAAIE,OAAOF,GAAMG,KAAKJ,EAAQzC,QAGtC8C,QAGPN,EAfA,GCHaO,EAA0C,IAAIC,EAAAA,eAA2B,eAItF,SAAAC,EAA4BC,EAAYC,EAAoB1D,GAC1D,OAAO,IAAIT,EAAuBkE,EAAMC,EAAU,IAAIX,EAA+B/C,EAAO0B,cAG9F,IAAaiC,EAAsC,CACjDC,QAASrE,EACTsE,WAAYL,EACZM,KAAM,CAACC,EAAAA,KAAMC,EAAAA,SAAUV,IAQzBW,EAAA,WAAA,SAAAA,YACSA,EAATC,QAAE,SAAelE,GACb,YADJ,IAAAA,IAAiBA,EAAjB,CAAuC0B,aAAc,KAC1C,CACLyC,SAAUF,EACVG,UAAW,CAAC,CACRR,QAASN,EACTe,SAAUrE,GAEZ2D,OARR,iBALA,CAAAW,KAACC,EAAAA,SAADC,KAAA,CAAU,CACRC,QAAS,CACPC,EAAAA,sDCQJ,IAAAC,EAAA,WAUE,SAAFA,EAAclB,EAAazD,GACvBH,KAAK4D,KAAOA,EACZ5D,KAAK+E,MAAQ5E,EAAO6E,QAAQ3B,QAAQ,MAAO,IAC3CrD,KAAKiF,MAAQ9E,EAAOiD,KAAKC,QAAQ,MAAO,IACxCrD,KAAKkF,aAAe/E,EAAOgF,YAAchF,EAAOgF,YAAc,IAAIC,EAAAA,QAClEpF,KAAKqF,gBAAkBlF,EAAOmF,eAAiBnF,EAAOmF,eAAiB,WAAM,OAAA,IAAIF,EAAAA,SACjFpF,KAAKuF,UAAYpF,EAAOoF,UAAYpF,EAAOoF,UAAY,SAAC9C,GAA4B,OAAAA,EAAS+C,QAmKjG,OAhKSV,EAATtE,UAAAiF,MAAS,SAAMA,EAAoBF,GAA1B,IAATxF,EAAAC,KAEI,OADoCA,KAAK4D,KAAKtD,IAAIN,KAAK0F,SAASC,UAAWF,GAAQzF,KAAK4F,uBACzEC,KACbC,EAAAA,WAAW,SAACvD,GACV,OAAO,IAAIF,EAAAA,WAAgB,SAACC,GAC1B,IACEA,EAAWC,MAAMxC,EAAKwF,UAAUhD,IAChC,MAAOwD,GACPzD,EAAWC,MAAMA,QAIvBN,EAAAA,IAAI,SAAC+D,GACH,OAAIT,EACKA,EAAUS,GAEZjG,EAAKwF,UAAUS,OAKrBlB,EAATtE,UAAAF,IAAS,SAAI2F,EAAqBV,GAAzB,IAATxF,EAAAC,KAEI,OADoCA,KAAK4D,KAAKtD,IAAIN,KAAK0F,SAASO,GAAKjG,KAAK4F,uBAC3DC,KACbC,EAAAA,WAAW,SAACvD,GACV,OAAO,IAAIF,EAAAA,WAAgB,SAACC,GAC1B,IACEA,EAAWC,MAAMxC,EAAKwF,UAAUhD,IAChC,MAAOwD,GACPzD,EAAWC,MAAMA,QAIvBN,EAAAA,IAAI,SAAC+D,GACH,OAAIT,EACKA,EAAUS,GAEZjG,EAAKwF,UAAUS,OAKrBlB,EAATtE,UAAA0F,OAAS,SAAOC,EAAQZ,GAAf,IAATxF,EAAAC,KACQW,EAAqCX,KAAK4F,sBAE9C,OADoC5F,KAAK4D,KAAKrC,KAAKvB,KAAK0F,WAAYS,EAAKxF,GAC1DkF,KACbC,EAAAA,WAAW,SAACvD,GACV,OAAO,IAAIF,EAAAA,WAAgB,SAACC,GAC1B,IACEA,EAAWC,MAAMxC,EAAKwF,UAAUhD,IAChC,MAAOwD,GACPzD,EAAWC,MAAMA,QAIvBN,EAAAA,IAAI,SAAC+D,GACH,OAAmB,MAAfA,EAAII,OACFb,EACKA,EAAUS,GAEZjG,EAAKwF,UAAUS,GAEfA,MAMRlB,EAATtE,UAAA6F,OAAS,SAAOJ,EAAqBE,EAAQZ,GAApC,IAATxF,EAAAC,KACQW,EAAqCX,KAAK4F,sBAE9C,OADoC5F,KAAK4D,KAAKzC,MAAMnB,KAAK0F,SAASO,GAAKE,EAAKxF,GAC7DkF,KACbC,EAAAA,WAAW,SAACvD,GACV,OAAO,IAAIF,EAAAA,WAAgB,SAACC,GAC1B,IACEA,EAAWC,MAAMxC,EAAKwF,UAAUhD,IAChC,MAAOwD,GACPzD,EAAWC,MAAMA,QAIvBN,EAAAA,IAAI,SAAC+D,GACH,OAAmB,MAAfA,EAAII,OACFb,EACKA,EAAUS,GAEZjG,EAAKwF,UAAUS,GAEfA,MAMRlB,EAATtE,UAAAC,UAAS,SAAOwF,EAAqBV,GAA5B,IAATxF,EAAAC,KAEI,OADoCA,KAAK4D,KAAKnD,UAAOT,KAAK0F,SAASO,GAAKjG,KAAK4F,uBAC9DC,KACbC,EAAAA,WAAW,SAACvD,GACV,OAAO,IAAIF,EAAAA,WAAgB,SAACC,GAC1B,IACEA,EAAWC,MAAMxC,EAAKwF,UAAUhD,IAChC,MAAOwD,GACPzD,EAAWC,MAAMA,QAIvBN,EAAAA,IAAI,SAAC+D,GACH,OAAmB,MAAfA,EAAII,OACFb,EACKA,EAAUS,GAEZjG,EAAKwF,UAAUS,GAEfA,MAMLlB,EAAZtE,UAAAoF,oBAAY,WACR,IAAIU,EAA0B,IAAIlB,EAAAA,QAUlC,OATApF,KAAKkF,aAAahF,QAAQ,SAACqG,EAAiBC,GAC1CF,EAAeG,IAAID,EAAKD,KAE1BvG,KAAKqF,kBAAkBnF,QAAQ,SAACqG,EAAiBC,GAC/CF,EAAeG,IAAID,EAAKD,KAEe,CACvCG,QAASJ,IAKHxB,EAAZtE,UAAAkF,SAAY,SAASO,EAAsBR,GACvC,IAAI/E,EAAcV,KAAKiF,MAAQjF,KAAKiF,MAAQ,GAQ5C,OAPIgB,IACFvF,GAAO,IAAIuF,GAETR,IACF/E,GAAOV,KAAK2G,WAAWlB,IAEzB/E,EAASV,KAAK+E,MAAlB,IAA2BrE,GAIfoE,EAAZtE,UAAAmG,WAAY,SAAWlB,GACnB,IAAI/E,EAAc,GAClB,GAAI+E,EAAO,CACT/E,GAAO,IACP,IAAIkG,EAAmB,GACvB,IAAK,IAAIJ,KAAOf,EAAO,CACrB,IAAIc,EAAmCd,EAAMe,GACzCD,IAAUZ,WACZiB,EAAOxG,KAAQoG,EAAzB,IAAgCD,GAG1B7F,GAAOkG,EAAOC,KAAK,KAErB,OAAOnG,GAEXoE,EAnLA"
}
