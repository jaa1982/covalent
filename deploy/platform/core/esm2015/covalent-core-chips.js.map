{
  "version": 3,
  "file": "covalent-core-chips.js",
  "sources": [
    "ng://@covalent/core/chips/out/chips.module.ts",
    "ng://@covalent/core/chips/out/chips.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\n\r\nimport { TdChipsComponent, TdChipDirective, TdAutocompleteOptionDirective } from './chips.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatChipsModule,\r\n    MatAutocompleteModule,\r\n  ],\r\n  declarations: [\r\n    TdChipsComponent,\r\n    TdChipDirective,\r\n    TdAutocompleteOptionDirective,\r\n  ],\r\n  exports: [\r\n    TdChipsComponent,\r\n    TdChipDirective,\r\n    TdAutocompleteOptionDirective,\r\n  ],\r\n})\r\nexport class CovalentChipsModule {\r\n\r\n}\r\n",
    "import { Component, Input, Output, forwardRef, DoCheck, ViewChild, ViewChildren, QueryList, OnInit, HostListener,\r\n  ElementRef, Optional, Inject, Directive, TemplateRef, ViewContainerRef, ContentChild, ChangeDetectionStrategy,\r\n  ChangeDetectorRef, AfterViewInit, OnDestroy, HostBinding, Renderer2 } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\r\n\r\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { UP_ARROW, DOWN_ARROW, ESCAPE, LEFT_ARROW, RIGHT_ARROW, DELETE, BACKSPACE, ENTER, SPACE, TAB, HOME } from '@angular/cdk/keycodes';\r\nimport { MatChip } from '@angular/material/chips';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\r\n\r\nimport { Observable, Subscription, timer, merge, fromEvent } from 'rxjs';\r\nimport { filter, debounceTime } from 'rxjs/operators';\r\n\r\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\r\n\r\n@Directive({\r\n  selector: '[td-chip]ng-template',\r\n})\r\nexport class TdChipDirective extends TemplatePortalDirective {\r\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[td-autocomplete-option]ng-template',\r\n})\r\nexport class TdAutocompleteOptionDirective extends TemplatePortalDirective {\r\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\n}\r\n\r\nexport class TdChipsBase {\r\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\r\n}\r\n\r\n/* tslint:disable-next-line */\r\nexport const _TdChipsMixinBase = mixinControlValueAccessor(mixinDisabled(TdChipsBase), []);\r\n\r\n@Component({\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TdChipsComponent),\r\n    multi: true,\r\n  }],\r\n  selector: 'td-chips',\r\n  inputs: ['disabled', 'value'],\r\n  styles: [`:host{display:block;padding:0 5px;min-height:48px}:host .td-chips-wrapper{min-height:42px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}:host .td-chips-wrapper.td-chips-stacked .mat-basic-chip,:host .td-chips-wrapper.td-chips-stacked .td-chips-form-field{width:100%}:host .td-chips-wrapper.td-chips-input-before-position .td-chips-form-field{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}:host .td-chip,:host .td-chip>.td-chip-content{-webkit-box-sizing:border-box;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;max-width:100%;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:start}:host .td-chip.td-chip-stacked,:host .td-chip>.td-chip-content.td-chip-stacked{-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}:host ::ng-deep .mat-form-field-wrapper{padding-bottom:2px}:host ::ng-deep .mat-basic-chip{display:inline-block;cursor:default;border-radius:16px;margin:8px 8px 0 0;-webkit-box-sizing:border-box;box-sizing:border-box;max-width:100%;position:relative}html[dir=rtl] :host ::ng-deep .mat-basic-chip{margin:8px 0 0 8px;unicode-bidi:embed}body[dir=rtl] :host ::ng-deep .mat-basic-chip{margin:8px 0 0 8px;unicode-bidi:embed}[dir=rtl] :host ::ng-deep .mat-basic-chip{margin:8px 0 0 8px;unicode-bidi:embed}:host ::ng-deep .mat-basic-chip bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host ::ng-deep .mat-basic-chip bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host ::ng-deep .mat-basic-chip .td-chip{min-height:32px;line-height:32px;font-size:13px;padding:0 0 0 12px}html[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip{padding:0 12px 0 0;unicode-bidi:embed}body[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip{padding:0 12px 0 0;unicode-bidi:embed}[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip{padding:0 12px 0 0;unicode-bidi:embed}:host ::ng-deep .mat-basic-chip .td-chip bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host ::ng-deep .mat-basic-chip .td-chip bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar]{display:inline-block;-webkit-box-ordinal-group:-19;-ms-flex-order:-20;order:-20;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;height:32px;width:32px;margin:0 8px 0 -12px;border-radius:50%}html[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar]{margin:0 -12px 0 8px;unicode-bidi:embed}body[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar]{margin:0 -12px 0 8px;unicode-bidi:embed}[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar]{margin:0 -12px 0 8px;unicode-bidi:embed}:host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host ::ng-deep .mat-basic-chip.td-chip-after-pad{padding:0 12px 0 0}html[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad{padding:0 0 0 12px;unicode-bidi:embed}body[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad{padding:0 0 0 12px;unicode-bidi:embed}[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad{padding:0 0 0 12px;unicode-bidi:embed}:host ::ng-deep .mat-basic-chip.td-chip-after-pad bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host ::ng-deep .mat-basic-chip.td-chip-after-pad bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host ::ng-deep .mat-basic-chip mat-icon.td-chip-removal{margin:0 4px;font-size:21px;line-height:22px}:host ::ng-deep .mat-basic-chip mat-icon.td-chip-removal:hover{cursor:pointer}:host ::ng-deep .td-chips-stacked .mat-basic-chip{margin:4px 0}:host ::ng-deep .td-chips-stacked .mat-basic-chip:first-of-type{margin:8px 0 4px}:host ::ng-deep .td-chips-stacked .mat-basic-chip:last-of-type{margin:4px 0 8px}:host .mat-form-field-underline{position:relative;height:1px;width:100%;bottom:0}:host .mat-form-field-underline.mat-disabled{background-position:0;bottom:-4px;background-color:transparent}:host .mat-form-field-underline .mat-form-field-ripple{position:absolute;height:2px;top:0;width:100%;-webkit-transform-origin:50%;transform-origin:50%;-webkit-transform:scaleX(.5);transform:scaleX(.5);visibility:hidden;opacity:0;-webkit-transition:background-color .3s cubic-bezier(.55,0,.55,.2);transition:background-color .3s cubic-bezier(.55,0,.55,.2)}:host .mat-form-field-underline .mat-form-field-ripple.mat-focused{visibility:visible;opacity:1;-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transition:background-color .3s cubic-bezier(.55,0,.55,.2),-webkit-transform 150ms linear;transition:background-color .3s cubic-bezier(.55,0,.55,.2),-webkit-transform 150ms linear;transition:transform 150ms linear,background-color .3s cubic-bezier(.55,0,.55,.2);transition:transform 150ms linear,background-color .3s cubic-bezier(.55,0,.55,.2),-webkit-transform 150ms linear}:host ::ng-deep mat-form-field .mat-form-field-underline{display:none}`],\r\n  template: `<div class=\"td-chips-wrapper\"\r\n     [class.td-chips-stacked]=\"stacked\"\r\n     [class.td-chips-input-before-position]=\"inputPosition === 'before'\">\r\n  <ng-template let-chip let-first=\"first\" let-index=\"index\" ngFor [ngForOf]=\"value\">\r\n    <mat-basic-chip [class.td-chip-disabled]=\"disabled\"\r\n                   [class.td-chip-after-pad]=\"!canRemoveChip\"\r\n                   [disableRipple]=\"true\"\r\n                   [color]=\"color\"\r\n                   (keydown)=\"_chipKeydown($event, index)\"\r\n                   (blur)=\"_handleChipBlur($event, chip)\"\r\n                   (focus)=\"_handleChipFocus($event, chip)\">\r\n      <div class=\"td-chip\" [class.td-chip-stacked]=\"stacked\">\r\n        <span class=\"td-chip-content\">\r\n          <span *ngIf=\"!_chipTemplate?.templateRef\">{{chip}}</span>\r\n          <ng-template\r\n            *ngIf=\"_chipTemplate?.templateRef\"\r\n            [ngTemplateOutlet]=\"_chipTemplate?.templateRef\"\r\n            [ngTemplateOutletContext]=\"{ chip: chip }\">\r\n          </ng-template>\r\n        </span>\r\n        <mat-icon *ngIf=\"canRemoveChip\" class=\"td-chip-removal\" (click)=\"_internalClick = removeChip(index)\">\r\n          cancel\r\n        </mat-icon>\r\n      </div>\r\n    </mat-basic-chip>\r\n  </ng-template>\r\n  <mat-form-field floatLabel=\"never\"\r\n                  class=\"td-chips-form-field\"\r\n                  [style.width.px]=\"canAddChip ? null : 0\"\r\n                  [style.height.px]=\"canAddChip ? null : 0\"\r\n                  [color]=\"color\">\r\n    <input matInput\r\n            #input\r\n            [tabIndex]=\"-1\"\r\n            [matAutocomplete]=\"autocomplete\"\r\n            [formControl]=\"inputControl\"\r\n            [placeholder]=\"canAddChip? placeholder : ''\"\r\n            (keydown)=\"_inputKeydown($event)\"\r\n            (keyup.enter)=\"_handleAddChip()\"\r\n            (focus)=\"_handleFocus()\">\r\n  </mat-form-field>\r\n  <mat-autocomplete #autocomplete=\"matAutocomplete\"\r\n                   [displayWith]=\"_removeInputDisplay\"\r\n                   (optionSelected)=\"addChip($event.option.value)\">\r\n    <ng-template let-item let-first=\"first\" ngFor [ngForOf]=\"items\">\r\n      <mat-option (click)=\"_setInternalClick()\" [value]=\"item\">\r\n        <span *ngIf=\"!_autocompleteOptionTemplate?.templateRef\">{{item}}</span>\r\n        <ng-template\r\n          *ngIf=\"_autocompleteOptionTemplate?.templateRef\"\r\n          [ngTemplateOutlet]=\"_autocompleteOptionTemplate?.templateRef\"\r\n          [ngTemplateOutletContext]=\"{ option: item }\">\r\n        </ng-template>\r\n      </mat-option>\r\n    </ng-template>\r\n  </mat-autocomplete>\r\n</div>\r\n<div *ngIf=\"chipAddition\" class=\"mat-form-field-underline\"\r\n      [class.mat-disabled]=\"disabled\">\r\n  <span class=\"mat-form-field-ripple\"\r\n        [class.mat-focused]=\"focused\"></span>\r\n</div>\r\n<ng-content></ng-content>`,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TdChipsComponent extends _TdChipsMixinBase implements IControlValueAccessor, DoCheck, OnInit, AfterViewInit, OnDestroy, ICanDisable {\r\n\r\n  private _outsideClickSubs: Subscription;\r\n\r\n  private _isMousedown: boolean = false;\r\n\r\n  private _items: any[];\r\n  private _length: number = 0;\r\n  private _stacked: boolean = false;\r\n  private _requireMatch: boolean = false;\r\n  private _color: 'primary' | 'accent' | 'warn' = 'primary';\r\n  private _inputPosition: 'before' | 'after' = 'after';\r\n  private _chipAddition: boolean = true;\r\n  private _chipRemoval: boolean = true;\r\n  private _focused: boolean = false;\r\n  private _tabIndex: number = 0;\r\n\r\n  _internalClick: boolean = false;\r\n  _internalActivateOption: boolean = false;\r\n\r\n  @ViewChild('input') _nativeInput: ElementRef;\r\n  @ViewChild(MatInput) _inputChild: MatInput;\r\n  @ViewChild(MatAutocompleteTrigger) _autocompleteTrigger: MatAutocompleteTrigger;\r\n  @ViewChildren(MatChip) _chipsChildren: QueryList<MatChip>;\r\n\r\n  @ContentChild(TdChipDirective) _chipTemplate: TdChipDirective;\r\n  @ContentChild(TdAutocompleteOptionDirective) _autocompleteOptionTemplate: TdAutocompleteOptionDirective;\r\n\r\n  @ViewChildren(MatOption) _options: QueryList<MatOption>;\r\n\r\n  /**\r\n   * Flag that is true when autocomplete is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this._focused;\r\n  }\r\n\r\n  /**\r\n   * FormControl for the matInput element.\r\n   */\r\n  inputControl: FormControl = new FormControl();\r\n\r\n  /**\r\n   * items?: any[]\r\n   * Renders the `mat-autocomplete` with the provided list to display as options.\r\n   */\r\n  @Input('items')\r\n  set items(items: any[]) {\r\n    this._items = items;\r\n    this._setFirstOptionActive();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  get items(): any[] {\r\n    return this._items;\r\n  }\r\n\r\n  /**\r\n   * stacked?: boolean\r\n   * Set stacked or horizontal chips depending on value.\r\n   * Defaults to false.\r\n   */\r\n  @Input('stacked')\r\n  set stacked(stacked: boolean) {\r\n    this._stacked = coerceBooleanProperty(stacked);\r\n  }\r\n  get stacked(): boolean {\r\n    return this._stacked;\r\n  }\r\n\r\n  /**\r\n   * inputPosition?: 'before' | 'after'\r\n   * Set input position before or after the chips.\r\n   * Defaults to 'after'.\r\n   */\r\n  @Input('inputPosition')\r\n  set inputPosition(inputPosition: 'before' | 'after') {\r\n    this._inputPosition = inputPosition;\r\n  }\r\n  get inputPosition(): 'before' | 'after' {\r\n    return this._inputPosition;\r\n  }\r\n\r\n  /**\r\n   * requireMatch?: boolean\r\n   * Blocks custom inputs and only allows selections from the autocomplete list.\r\n   */\r\n  @Input('requireMatch')\r\n  set requireMatch(requireMatch: boolean) {\r\n    this._requireMatch = coerceBooleanProperty(requireMatch);\r\n  }\r\n  get requireMatch(): boolean {\r\n    return this._requireMatch;\r\n  }\r\n\r\n  /**\r\n   * chipAddition?: boolean\r\n   * Disables the ability to add chips. When setting disabled as true, this will be overriden.\r\n   * Defaults to true.\r\n   */\r\n  @Input('chipAddition')\r\n  set chipAddition(chipAddition: boolean) {\r\n    this._chipAddition = chipAddition;\r\n    this._toggleInput();\r\n  }\r\n  get chipAddition(): boolean {\r\n    return this._chipAddition;\r\n  }\r\n\r\n  /**\r\n   * Checks if not in disabled state and if chipAddition is set to 'true'\r\n   * States if a chip can be added and if the input is available\r\n   */\r\n  get canAddChip(): boolean {\r\n    return this.chipAddition && !this.disabled;\r\n  }\r\n\r\n  /**\r\n   * chipRemoval?: boolean\r\n   * Disables the ability to remove chips. If it doesn't exist chip remmoval defaults to true.\r\n   * When setting disabled as true, this will be overriden to false.\r\n   */\r\n  @Input('chipRemoval')\r\n  set chipRemoval(chipRemoval: boolean) {\r\n    this._chipRemoval = chipRemoval;\r\n  }\r\n  get chipRemoval(): boolean {\r\n    return this._chipRemoval;\r\n  }\r\n\r\n  /**\r\n   * Checks if not in disabled state and if chipRemoval is set to 'true'\r\n   * States if a chip can be removed\r\n   */\r\n  get canRemoveChip(): boolean {\r\n    return this.chipRemoval && !this.disabled;\r\n  }\r\n\r\n  /**\r\n   * placeholder?: string\r\n   * Placeholder for the autocomplete input.\r\n   */\r\n  @Input('placeholder') placeholder: string;\r\n\r\n  /**\r\n   * debounce?: number\r\n   * Debounce timeout between keypresses. Defaults to 200.\r\n   */\r\n  @Input('debounce') debounce: number = 200;\r\n\r\n  /**\r\n   * color?: 'primary' | 'accent' | 'warn'\r\n   * Sets the color for the input and focus/selected state of the chips.\r\n   * Defaults to 'primary'\r\n   */\r\n  @Input('color')\r\n  set color(color: 'primary' | 'accent' | 'warn') {\r\n    if (color) {\r\n      this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\r\n      this._color = color;\r\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\r\n    }\r\n  }\r\n  get color(): 'primary' | 'accent' | 'warn' {\r\n    return this._color;\r\n  }\r\n\r\n  /**\r\n   * add?: function\r\n   * Method to be executed when a chip is added.\r\n   * Sends chip value as event.\r\n   */\r\n  @Output('add') onAdd: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /**\r\n   * remove?: function\r\n   * Method to be executed when a chip is removed.\r\n   * Sends chip value as event.\r\n   */\r\n  @Output('remove') onRemove: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /**\r\n   * inputChange?: function\r\n   * Method to be executed when the value in the autocomplete input changes.\r\n   * Sends string value as event.\r\n   */\r\n  @Output('inputChange') onInputChange: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  /**\r\n   * chipFocus?: function\r\n   * Method to be executed when a chip is focused.\r\n   * Sends chip value as event.\r\n   */\r\n  @Output('chipFocus') onChipFocus: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /**\r\n   * blur?: function\r\n   * Method to be executed when a chip is blurred.\r\n   * Sends chip value as event.\r\n   */\r\n  @Output('chipBlur') onChipBlur: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /**\r\n   * Hostbinding to set the a11y of the TdChipsComponent depending on its state\r\n   */\r\n  @HostBinding('attr.tabindex')\r\n  get tabIndex(): number {\r\n    return this.disabled ? -1 : this._tabIndex;\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _renderer: Renderer2,\r\n              @Optional() @Inject(DOCUMENT) private _document: any,\r\n              _changeDetectorRef: ChangeDetectorRef) {\r\n    super(_changeDetectorRef);\r\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\r\n  }\r\n\r\n  /**\r\n   * Listens to host focus event to act on it\r\n   */\r\n  @HostListener('focus', ['$event'])\r\n  focusListener(event: FocusEvent): void {\r\n    // should only focus if its not via mousedown to prevent clashing with autocomplete\r\n    if (!this._isMousedown) {\r\n      this.focus();\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Listens to host mousedown event to act on it\r\n   */\r\n  @HostListener('mousedown', ['$event'])\r\n  mousedownListener(event: FocusEvent): void {\r\n     // sets a flag to know if there was a mousedown and then it returns it back to false\r\n    this._isMousedown = true;\r\n    timer().toPromise().then(() => {\r\n      this._isMousedown = false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If clicking on :host or `td-chips-wrapper`, then we stop the click propagation so the autocomplete\r\n   * doesnt close automatically.\r\n   */\r\n  @HostListener('click', ['$event'])\r\n  clickListener(event: Event): void {\r\n    const clickTarget: HTMLElement = <HTMLElement>event.target;\r\n    if (clickTarget === this._elementRef.nativeElement ||\r\n        clickTarget.className.indexOf('td-chips-wrapper') > -1) {\r\n      this.focus();\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to host keydown event to act on it depending on the keypress\r\n   */\r\n  @HostListener('keydown', ['$event'])\r\n  keydownListener(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case TAB:\r\n        // if tabing out, then unfocus the component\r\n        timer().toPromise().then(() => {\r\n          this.removeFocusedState();\r\n        });\r\n        break;\r\n      case ESCAPE:\r\n        if (this._inputChild.focused) {\r\n          this._nativeInput.nativeElement.blur();\r\n          this.removeFocusedState();\r\n          this._closeAutocomplete();\r\n        } else {\r\n          this.focus();\r\n        }\r\n        break;\r\n      default:\r\n        // default\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.inputControl.valueChanges.pipe(\r\n      debounceTime(this.debounce),\r\n    ).subscribe((value: string) => {\r\n      this.onInputChange.emit(value ? value : '');\r\n    });\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._watchOutsideClick();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    // Throw onChange event only if array changes size.\r\n    if (this.value && this.value.length !== this._length) {\r\n      this._length = this.value.length;\r\n      this.onChange(this.value);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._outsideClickSubs) {\r\n      this._outsideClickSubs.unsubscribe();\r\n      this._outsideClickSubs = undefined;\r\n    }\r\n  }\r\n\r\n  _setInternalClick(): void {\r\n    this._internalClick = true;\r\n  }\r\n\r\n  /** Method executed when the disabled value changes */\r\n  onDisabledChange(v: boolean): void {\r\n    this._toggleInput();\r\n  }\r\n\r\n  /**\r\n   * Method that is executed when trying to create a new chip from the autocomplete.\r\n   * It check if [requireMatch] is enabled, and tries to add the first active option\r\n   * else if just adds the value thats on the input\r\n   * returns 'true' if successful, 'false' if it fails.\r\n   */\r\n  _handleAddChip(): boolean {\r\n    let value: any;\r\n    if (this.requireMatch) {\r\n      let selectedOptions: MatOption[] = this._options.toArray().filter((option: MatOption) => {\r\n        return option.active;\r\n      });\r\n      if (selectedOptions.length > 0) {\r\n        value = selectedOptions[0].value;\r\n        selectedOptions[0].setInactiveStyles();\r\n      }\r\n      if (!value) {\r\n        return false;\r\n      }\r\n    } else {\r\n      // if there is a selection, then use that\r\n      // else use the input value as chip\r\n      if (this._autocompleteTrigger.activeOption) {\r\n        value = this._autocompleteTrigger.activeOption.value;\r\n        this._autocompleteTrigger.activeOption.setInactiveStyles();\r\n      } else {\r\n        value = this._inputChild.value;\r\n        if (value.trim() === '') {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return this.addChip(value);\r\n  }\r\n\r\n  /**\r\n   * Method thats exectuted when trying to add a value as chip\r\n   * returns 'true' if successful, 'false' if it fails.\r\n   */\r\n  addChip(value: any): boolean {\r\n    /**\r\n     * add a debounce ms delay when reopening the autocomplete to give it time\r\n     * to rerender the next list and at the correct spot\r\n     */\r\n    this._closeAutocomplete();\r\n    timer(this.debounce).toPromise().then(() => {\r\n      this.setFocusedState();\r\n      this._setFirstOptionActive();\r\n      this._openAutocomplete();\r\n    });\r\n\r\n    this.inputControl.setValue('');\r\n    // check if value is already part of the model\r\n    if (this.value.indexOf(value) > -1) {\r\n      return false;\r\n    }\r\n\r\n    this.value.push(value);\r\n    this.onAdd.emit(value);\r\n    this.onChange(this.value);\r\n    this._changeDetectorRef.markForCheck();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Method that is executed when trying to remove a chip.\r\n   * returns 'true' if successful, 'false' if it fails.\r\n   */\r\n  removeChip(index: number): boolean {\r\n    let removedValues: any[] = this.value.splice(index, 1);\r\n    if (removedValues.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if deleting last single chip, to focus input afterwards\r\n     * Else check if its not the last chip of the list to focus the next one.\r\n     */\r\n    if (index === (this._totalChips - 1) && index === 0) {\r\n      this._inputChild.focus();\r\n    } else if (index < (this._totalChips - 1)) {\r\n      this._focusChip(index + 1);\r\n    } else if (index > 0) {\r\n      this._focusChip(index - 1);\r\n    }\r\n\r\n    this.onRemove.emit(removedValues[0]);\r\n    this.onChange(this.value);\r\n    this.inputControl.setValue('');\r\n    this._changeDetectorRef.markForCheck();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets blur of chip and sends out event\r\n   */\r\n  _handleChipBlur(event: FocusEvent, value: any): void {\r\n    this.onChipBlur.emit(value);\r\n  }\r\n\r\n  /**\r\n   * Sets focus of chip and sends out event\r\n   */\r\n  _handleChipFocus(event: FocusEvent, value: any): void {\r\n    this.setFocusedState();\r\n    this.onChipFocus.emit(value);\r\n  }\r\n\r\n  _handleFocus(): boolean {\r\n    this.setFocusedState();\r\n    this._setFirstOptionActive();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets focus state of the component\r\n   */\r\n  setFocusedState(): void {\r\n    if (!this.disabled) {\r\n      this._focused = true;\r\n      this._tabIndex = -1;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes focus state of the component\r\n   */\r\n  removeFocusedState(): void {\r\n    this._focused = false;\r\n    this._tabIndex = 0;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Programmatically focus the input or first chip. Since its the component entry point\r\n   * depending if a user can add or remove chips\r\n   */\r\n  focus(): void {\r\n    if (this.canAddChip) {\r\n      this._inputChild.focus();\r\n    } else if (!this.disabled) {\r\n      this._focusFirstChip();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Passes relevant input key presses.\r\n   */\r\n  _inputKeydown(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case UP_ARROW:\r\n        /**\r\n         * Since the first item is highlighted on [requireMatch], we need to inactivate it\r\n         * when pressing the up key\r\n         */\r\n        if (this.requireMatch) {\r\n          let length: number = this._options.length;\r\n          if (length > 1 && this._options.toArray()[0].active && this._internalActivateOption) {\r\n            this._options.toArray()[0].setInactiveStyles();\r\n            this._internalActivateOption = false;\r\n            // prevent default window scrolling\r\n            event.preventDefault();\r\n          }\r\n        }\r\n        break;\r\n      case LEFT_ARROW:\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        this._closeAutocomplete();\r\n        /** Check to see if input is empty when pressing left arrow to move to the last chip */\r\n        if (!this._inputChild.value) {\r\n          this._focusLastChip();\r\n          // prevent default window scrolling\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._closeAutocomplete();\r\n        /** Check to see if input is empty when pressing right arrow to move to the first chip */\r\n        if (!this._inputChild.value) {\r\n          this._focusFirstChip();\r\n          // prevent default window scrolling\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      default:\r\n        // default\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Passes relevant chip key presses.\r\n   */\r\n  _chipKeydown(event: KeyboardEvent, index: number): void {\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        /** Check to see if we can delete a chip */\r\n        if (this.canRemoveChip) {\r\n         this.removeChip(index);\r\n        }\r\n        break;\r\n      case UP_ARROW:\r\n      case LEFT_ARROW:\r\n        /**\r\n         * Check to see if left/down arrow was pressed while focusing the first chip to focus input next\r\n         * Also check if input should be focused\r\n         */\r\n        if (index === 0) {\r\n          // only try to target input if pressing left\r\n          if (this.canAddChip && event.keyCode === LEFT_ARROW) {\r\n            this._inputChild.focus();\r\n          } else {\r\n            this._focusLastChip();\r\n          }\r\n        } else if (index > 0) {\r\n          this._focusChip(index - 1);\r\n        }\r\n        // prevent default window scrolling\r\n        event.preventDefault();\r\n        break;\r\n      case DOWN_ARROW:\r\n      case RIGHT_ARROW:\r\n        /**\r\n         * Check to see if right/up arrow was pressed while focusing the last chip to focus input next\r\n         * Also check if input should be focused\r\n         */\r\n        if (index === (this._totalChips - 1)) {\r\n          // only try to target input if pressing right\r\n          if (this.canAddChip && event.keyCode === RIGHT_ARROW) {\r\n            this._inputChild.focus();\r\n          } else {\r\n            this._focusFirstChip();\r\n          }\r\n        } else if (index < (this._totalChips - 1)) {\r\n          this._focusChip(index + 1);\r\n        }\r\n        // prevent default window scrolling\r\n        event.preventDefault();\r\n        break;\r\n      default:\r\n        // default\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to remove from display the value added from the autocomplete since it goes directly as chip.\r\n   */\r\n  _removeInputDisplay(): string {\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Method to open the autocomplete manually if its not already opened\r\n   */\r\n  _openAutocomplete(): void {\r\n    if (!this._autocompleteTrigger.panelOpen) {\r\n      this._autocompleteTrigger.openPanel();\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to close the autocomplete manually if its not already closed\r\n   */\r\n  _closeAutocomplete(): void {\r\n    if (this._autocompleteTrigger.panelOpen) {\r\n      this._autocompleteTrigger.closePanel();\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get total of chips\r\n   */\r\n  get _totalChips(): number {\r\n    let chips: MatChip[] = this._chipsChildren.toArray();\r\n    return chips.length;\r\n  }\r\n\r\n  /**\r\n   * Method to focus a desired chip by index\r\n   */\r\n  private _focusChip(index: number): void {\r\n    /** check to see if index exists in the array before focusing */\r\n    if (index > -1 && this._totalChips > index) {\r\n      this._chipsChildren.toArray()[index].focus();\r\n    }\r\n  }\r\n\r\n  /** Method to focus first chip */\r\n  private _focusFirstChip(): void {\r\n    this._focusChip(0);\r\n  }\r\n\r\n  /** Method to focus last chip */\r\n  private _focusLastChip(): void {\r\n    this._focusChip(this._totalChips - 1);\r\n  }\r\n\r\n  /**\r\n   * Method to toggle the disable state of input\r\n   * Checks if not in disabled state and if chipAddition is set to 'true'\r\n   */\r\n  private _toggleInput(): void {\r\n    if (this.canAddChip) {\r\n      this.inputControl.enable();\r\n    } else {\r\n      this.inputControl.disable();\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Sets first option as active to let the user know which one will be added when pressing enter\r\n   * Only if [requireMatch] has been set\r\n   */\r\n  private _setFirstOptionActive(): void {\r\n    if (this.requireMatch) {\r\n      // need to use a timer here to wait until the autocomplete has been opened (end of queue)\r\n      timer().toPromise().then(() => {\r\n        if (this.focused && this._options && this._options.length > 0) {\r\n          // clean up of previously active options\r\n          this._options.toArray().forEach((option: MatOption) => {\r\n            option.setInactiveStyles();\r\n          });\r\n          // set the first one as active\r\n          this._options.toArray()[0].setActiveStyles();\r\n          this._internalActivateOption = true;\r\n          this._changeDetectorRef.markForCheck();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Watches clicks outside of the component to remove the focus\r\n   * The autocomplete panel is considered inside the component so we\r\n   * need to use a flag to find out when its clicked.\r\n   */\r\n  private _watchOutsideClick(): void {\r\n    if (this._document) {\r\n      merge(\r\n        fromEvent(this._document, 'click'),\r\n        fromEvent(this._document, 'touchend'),\r\n      ).pipe(\r\n        filter(\r\n          (event: MouseEvent) => {\r\n            const clickTarget: HTMLElement = <HTMLElement>event.target;\r\n            setTimeout(() => {\r\n              this._internalClick = false;\r\n            });\r\n            return this.focused &&\r\n                  (clickTarget !== this._elementRef.nativeElement) &&\r\n                  !this._elementRef.nativeElement.contains(clickTarget) && !this._internalClick;\r\n          },\r\n        ),\r\n      ).subscribe(() => {\r\n        if (this.focused) {\r\n          this._autocompleteTrigger.closePanel();\r\n          this.removeFocusedState();\r\n          this.onTouched();\r\n          this._changeDetectorRef.markForCheck();\r\n        }\r\n      });\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
