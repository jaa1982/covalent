{
  "version": 3,
  "file": "covalent-core-loading.umd.min.js",
  "sources": [
    "ng://@covalent/core/loading/node_modules/tslib/tslib.es6.js",
    "ng://@covalent/core/loading/out/loading.component.ts",
    "ng://@covalent/core/loading/out/services/loading.factory.ts",
    "ng://@covalent/core/loading/out/services/loading.service.ts",
    "ng://@covalent/core/loading/out/directives/loading.directive.ts",
    "ng://@covalent/core/loading/out/loading.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import { Component, ViewChild, TemplateRef, ChangeDetectorRef, ChangeDetectionStrategy, ElementRef, DoCheck } from '@angular/core';\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nexport enum LoadingType {\r\n  Circular = 'circular',\r\n  Linear = 'linear',\r\n}\r\n\r\nexport enum LoadingMode {\r\n  Determinate = 'determinate',\r\n  Indeterminate = 'indeterminate',\r\n}\r\n\r\nexport enum LoadingStrategy {\r\n  Overlay = 'overlay',\r\n  Replace = 'replace',\r\n}\r\n\r\nexport enum LoadingStyle {\r\n  FullScreen = 'fullscreen',\r\n  Overlay = 'overlay',\r\n  None = 'none',\r\n}\r\n\r\nimport { TdFadeInOutAnimation } from '@covalent/core/common';\r\n\r\nexport const TD_CIRCLE_DIAMETER: number = 100;\r\n\r\n@Component({\r\n  selector: 'td-loading',\r\n  styles: [`.td-loading-wrapper{position:relative;display:block}.td-loading-wrapper.td-fullscreen{position:inherit}.td-loading-wrapper .td-loading{-webkit-box-sizing:border-box;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;max-width:100%;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-flex:1;-ms-flex:1;flex:1}.td-loading-wrapper.td-overlay .td-loading{position:absolute;margin:0;top:0;left:0;right:0;z-index:1000}.td-loading-wrapper.td-overlay .td-loading mat-progress-bar{position:absolute;top:0;left:0;right:0}.td-loading-wrapper.td-overlay-circular .td-loading{bottom:0}`],\r\n  template: `<div class=\"td-loading-wrapper\"\r\n    [style.min-height]=\"getHeight()\"\r\n    [class.td-overlay-circular]=\"(isOverlay() || isFullScreen()) && !isLinear()\"\r\n    [class.td-overlay]=\"isOverlay() || isFullScreen()\" \r\n    [class.td-fullscreen]=\"isFullScreen()\">\r\n  <div [@tdFadeInOut]=\"animation\"\r\n     (@tdFadeInOut.done)=\"animationComplete($event)\"\r\n     [style.min-height]=\"getHeight()\"\r\n     class=\"td-loading\">\r\n    <mat-progress-spinner *ngIf=\"isCircular()\" \r\n                        [mode]=\"mode\"\r\n                        [value]=\"value\" \r\n                        [color]=\"color\" \r\n                        [diameter]=\"getCircleDiameter()\"\r\n                        [strokeWidth]=\"getCircleStrokeWidth()\">\r\n    </mat-progress-spinner>\r\n    <mat-progress-bar *ngIf=\"isLinear()\" \r\n                     [mode]=\"mode\"\r\n                     [value]=\"value\"\r\n                     [color]=\"color\">\r\n    </mat-progress-bar>\r\n  </div>\r\n  <ng-template [cdkPortalOutlet]=\"content\"></ng-template>\r\n</div>`,\r\n  animations: [\r\n    TdFadeInOutAnimation(),\r\n  ],\r\n})\r\nexport class TdLoadingComponent implements DoCheck {\r\n\r\n  private _animationIn: Subject<any> = new Subject<any>();\r\n  private _animationOut: Subject<any> = new Subject<any>();\r\n  private _mode: LoadingMode = LoadingMode.Indeterminate;\r\n  private _defaultMode: LoadingMode = LoadingMode.Indeterminate;\r\n  private _value: number = 0;\r\n  private _circleDiameter: number = TD_CIRCLE_DIAMETER;\r\n\r\n  /**\r\n   * Flag for animation\r\n   */\r\n  animation: boolean = false;\r\n\r\n  /**\r\n   * Content injected into loading component.\r\n   */\r\n  content: TemplatePortal<any>;\r\n\r\n  /**\r\n   * Sets mode of [TdLoadingComponent] to LoadingMode.Determinate or LoadingMode.Indeterminate\r\n   */\r\n  set mode(mode: LoadingMode) {\r\n    this._defaultMode = mode;\r\n  }\r\n  get mode(): LoadingMode {\r\n    return this._mode;\r\n  }\r\n\r\n  /**\r\n   * Sets value of [TdLoadingComponent] if mode is 'LoadingMode.Determinate'\r\n   */\r\n  set value(value: number) {\r\n    this._value = value;\r\n    // Check for changes for `OnPush` change detection\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  get value(): number {\r\n    return this._value;\r\n  }\r\n\r\n  style: LoadingStyle = LoadingStyle.None;\r\n\r\n  /**\r\n   * height: number\r\n   * Sets height of [TdLoadingComponent].\r\n   */\r\n  height: number;\r\n\r\n  /**\r\n   * type: LoadingType\r\n   * Sets type of [TdLoadingComponent] rendered.\r\n   */\r\n  type: LoadingType = LoadingType.Circular;\r\n\r\n  /**\r\n   * color: primary' | 'accent' | 'warn'\r\n   * Sets theme color of [TdLoadingComponent] rendered.\r\n   */\r\n  color: 'primary' | 'accent' | 'warn' = 'primary';\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngDoCheck(): void {\r\n    // When overlay is used and the host width has a value greater than 1px\r\n    // set the circle diameter when possible incase the loading component was rendered in a hidden state\r\n    if (this.isOverlay() && this._hostHeight() > 1) {\r\n      if (this.animation) {\r\n        this._setCircleDiameter();\r\n        this._changeDetectorRef.markForCheck();\r\n      }\r\n    }\r\n  }\r\n\r\n  getHeight(): string {\r\n    // Ignore height if style is `overlay` or `fullscreen`.\r\n    // Add height if child elements have a height and style is `none`, else return default height.\r\n    if (this.isOverlay() || this.isFullScreen()) {\r\n      return undefined;\r\n    } else {\r\n      return this.height ? `${this.height}px` : '150px';\r\n    }\r\n  }\r\n\r\n  getCircleDiameter(): number {\r\n    return this._circleDiameter;\r\n  }\r\n\r\n  getCircleStrokeWidth(): number {\r\n    // we calculate the stroke width by setting it as 10% of its diameter\r\n    let strokeWidth: number = this.getCircleDiameter() / 10;\r\n    return Math.abs(strokeWidth);\r\n  }\r\n\r\n  isCircular(): boolean {\r\n    return this.type === LoadingType.Circular;\r\n  }\r\n\r\n  isLinear(): boolean {\r\n    return this.type === LoadingType.Linear;\r\n  }\r\n\r\n  isFullScreen(): boolean {\r\n    return this.style === LoadingStyle.FullScreen;\r\n  }\r\n\r\n  isOverlay(): boolean {\r\n    return this.style === LoadingStyle.Overlay;\r\n  }\r\n\r\n  animationComplete(event: AnimationEvent): void {\r\n    // Check to see if its \"in\" or \"out\" animation to execute the proper callback\r\n    if (!event.fromState) {\r\n      this.inAnimationCompleted();\r\n    } else {\r\n      this.outAnimationCompleted();\r\n    }\r\n  }\r\n\r\n  inAnimationCompleted(): void {\r\n    this._animationIn.next(undefined);\r\n  }\r\n\r\n  outAnimationCompleted(): void {\r\n   /* little hack to reset the loader value and animation before removing it from DOM\r\n    * else, the loader will appear with prev value when its registered again\r\n    * and will do an animation going prev value to 0.\r\n    */\r\n    this.value = 0;\r\n    // Check for changes for `OnPush` change detection\r\n    this._changeDetectorRef.markForCheck();\r\n    this._animationOut.next(undefined);\r\n  }\r\n\r\n  /**\r\n   * Starts in animation and returns an observable for completition event.\r\n   */\r\n  startInAnimation(): Observable<any> {\r\n    /* need to switch back to the selected mode, so we have saved it in another variable\r\n    *  and then recover it. (issue with protractor)\r\n    */\r\n    this._mode = this._defaultMode;\r\n    // Set values before the animations starts\r\n    this._setCircleDiameter();\r\n    // Check for changes for `OnPush` change detection\r\n    this.animation = true;\r\n    this._changeDetectorRef.markForCheck();\r\n    return this._animationIn.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Starts out animation and returns an observable for completition event.\r\n   */\r\n  startOutAnimation(): Observable<any> {\r\n    this.animation = false;\r\n    /* need to switch back and forth from determinate/indeterminate so the setInterval()\r\n    * inside mat-progress-spinner stops and protractor doesnt timeout waiting to sync.\r\n    */\r\n    this._mode = LoadingMode.Determinate;\r\n    // Check for changes for `OnPush` change detection\r\n    this._changeDetectorRef.markForCheck();\r\n    return this._animationOut.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Calculate the proper diameter for the circle and set it\r\n   */\r\n  private _setCircleDiameter(): void {\r\n    // we set a default diameter of 100 since this is the default in material\r\n    let diameter: number = TD_CIRCLE_DIAMETER;\r\n    // if height is provided, then we take that as diameter\r\n    if (this.height) {\r\n      diameter = this.height;\r\n      // else if its not provided, then we take the host height\r\n    } else if (this.height === undefined) {\r\n      diameter = this._hostHeight();\r\n    }\r\n    // if the diameter is over TD_CIRCLE_DIAMETER, we set TD_CIRCLE_DIAMETER\r\n    if (!!diameter && diameter <= TD_CIRCLE_DIAMETER) {\r\n      this._circleDiameter = Math.floor(diameter);\r\n    } else {\r\n      this._circleDiameter = TD_CIRCLE_DIAMETER;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the host height of the loading component\r\n   */\r\n  private _hostHeight(): number {\r\n    if (<HTMLElement>this._elementRef.nativeElement) {\r\n      return (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n",
    "import { Injectable, ComponentFactoryResolver, ChangeDetectorRef, Provider, SkipSelf, Optional } from '@angular/core';\r\nimport { Injector, ComponentRef, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\r\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\n\r\nimport { TdLoadingContext } from '../directives/loading.directive';\r\nimport { TdLoadingComponent, LoadingType, LoadingMode, LoadingStrategy, LoadingStyle } from '../loading.component';\r\nimport { ITdLoadingConfig } from './loading.service';\r\n\r\nexport interface IInternalLoadingOptions extends ITdLoadingConfig {\r\n  height?: number;\r\n  style?: LoadingStyle;\r\n}\r\n\r\nexport interface ILoadingRef {\r\n  observable: Observable<any>;\r\n  componentRef: ComponentRef<any>;\r\n  subject?: Subject<any>;\r\n  times?: number;\r\n}\r\n\r\n/**\r\n * NOTE: @internal usage only.\r\n */\r\n@Injectable()\r\nexport class TdLoadingFactory {\r\n\r\n  constructor(private _componentFactoryResolver: ComponentFactoryResolver,\r\n              private _overlay: Overlay,\r\n              private _injector: Injector) {\r\n  }\r\n\r\n  /**\r\n   * Uses material `Overlay` services to create a DOM element and attach the loading component\r\n   * into it. Leveraging the state and configuration from it.\r\n   *\r\n   * Saves a reference in context to be called when registering/resolving the loading element.\r\n   */\r\n  public createFullScreenComponent(options: ITdLoadingConfig): ILoadingRef {\r\n    (<IInternalLoadingOptions>options).height = undefined;\r\n    (<IInternalLoadingOptions>options).style = LoadingStyle.FullScreen;\r\n    let loadingRef: ILoadingRef = this._initializeContext();\r\n    let loading: boolean = false;\r\n    let overlayRef: OverlayRef;\r\n    loadingRef.observable\r\n    .subscribe((registered: number) => {\r\n      if (registered > 0 && !loading) {\r\n        loading = true;\r\n        overlayRef = this._createOverlay();\r\n        loadingRef.componentRef = overlayRef.attach(new ComponentPortal(TdLoadingComponent));\r\n        this._mapOptions(options, loadingRef.componentRef.instance);\r\n        loadingRef.componentRef.instance.startInAnimation();\r\n        loadingRef.componentRef.changeDetectorRef.detectChanges();\r\n      } else if (registered <= 0 && loading) {\r\n        loading = false;\r\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\r\n          subs.unsubscribe();\r\n          loadingRef.componentRef.destroy();\r\n          overlayRef.detach();\r\n          overlayRef.dispose();\r\n        });\r\n      }\r\n    });\r\n    return loadingRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\r\n   * Leverages TemplatePortals from material to inject the template inside of it so it fits\r\n   * perfectly when overlaying it.\r\n   *\r\n   * Saves a reference in context to be called when registering/resolving the loading element.\r\n   */\r\n  public createOverlayComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\r\n                                templateRef: TemplateRef<Object>): ILoadingRef {\r\n    (<IInternalLoadingOptions>options).height = undefined;\r\n    (<IInternalLoadingOptions>options).style = LoadingStyle.Overlay;\r\n    let loadingRef: ILoadingRef = this._createComponent(options);\r\n    let loading: boolean = false;\r\n    loadingRef.componentRef.instance.content = new TemplatePortal(templateRef, viewContainerRef);\r\n    viewContainerRef.clear();\r\n    viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\r\n    loadingRef.observable\r\n    .subscribe((registered: number) => {\r\n      if (registered > 0 && !loading) {\r\n        loading = true;\r\n        loadingRef.componentRef.instance.startInAnimation();\r\n      } else if (registered <= 0 && loading) {\r\n        loading = false;\r\n        loadingRef.componentRef.instance.startOutAnimation();\r\n      }\r\n    });\r\n    return loadingRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\r\n   * Replaces the template with the loading component depending if it was registered or resolved.\r\n   *\r\n   * Saves a reference in context to be called when registering/resolving the loading element.\r\n   */\r\n  public createReplaceComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\r\n                                templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\r\n    let nativeElement: HTMLElement = <HTMLElement>templateRef.elementRef.nativeElement;\r\n    (<IInternalLoadingOptions>options).height = nativeElement.nextElementSibling ?\r\n      nativeElement.nextElementSibling.scrollHeight : undefined;\r\n    (<IInternalLoadingOptions>options).style = LoadingStyle.None;\r\n    let loadingRef: ILoadingRef = this._createComponent(options);\r\n    let loading: boolean = false;\r\n    viewContainerRef.createEmbeddedView(templateRef, context);\r\n    loadingRef.observable\r\n    .subscribe((registered: number) => {\r\n      if (registered > 0 && !loading) {\r\n        loading = true;\r\n        let index: number = viewContainerRef.indexOf(loadingRef.componentRef.hostView);\r\n        if (index < 0) {\r\n          viewContainerRef.clear();\r\n          viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\r\n        }\r\n        loadingRef.componentRef.instance.startInAnimation();\r\n      } else if (registered <= 0 && loading) {\r\n        loading = false;\r\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\r\n          subs.unsubscribe();\r\n          // passing context so when the template is re-attached, we can keep the reference of the variables\r\n          let cdr: ChangeDetectorRef = viewContainerRef.createEmbeddedView(templateRef, context);\r\n          viewContainerRef.detach(viewContainerRef.indexOf(loadingRef.componentRef.hostView));\r\n          /**\r\n           * Need to call \"markForCheck\" and \"detectChanges\" on attached template, so its detected by parent component when attached\r\n           * with \"OnPush\" change detection\r\n           */\r\n          cdr.detectChanges();\r\n          cdr.markForCheck();\r\n        });\r\n      }\r\n    });\r\n    return loadingRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a fullscreen overlay for the loading usage.\r\n   */\r\n  private _createOverlay(): OverlayRef {\r\n    let state: OverlayConfig = new OverlayConfig();\r\n    state.hasBackdrop = false;\r\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().centerVertically();\r\n    return this._overlay.create(state);\r\n  }\r\n\r\n  /**\r\n   * Creates a generic component dynamically waiting to be attached to a viewContainerRef.\r\n   */\r\n  private _createComponent(options: IInternalLoadingOptions): ILoadingRef {\r\n    let compRef: ILoadingRef = this._initializeContext();\r\n    compRef.componentRef = this._componentFactoryResolver\r\n    .resolveComponentFactory(TdLoadingComponent).create(this._injector);\r\n    this._mapOptions(options, compRef.componentRef.instance);\r\n    return compRef;\r\n  }\r\n\r\n  /**\r\n   * Initialize context for loading component.\r\n   */\r\n  private _initializeContext(): ILoadingRef {\r\n    let subject: Subject<any> = new Subject<any>();\r\n    return {\r\n      observable: subject.asObservable(),\r\n      subject: subject,\r\n      componentRef: undefined,\r\n      times: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps configuration to the loading component instance.\r\n   */\r\n  private _mapOptions(options: IInternalLoadingOptions, instance: TdLoadingComponent): void {\r\n    instance.style = options.style;\r\n    if (options.type !== undefined) {\r\n      instance.type = options.type;\r\n    }\r\n    if (options.height !== undefined) {\r\n      instance.height = options.height;\r\n    }\r\n    if (options.mode !== undefined) {\r\n      instance.mode = options.mode;\r\n    }\r\n    if (options.color !== undefined) {\r\n      instance.color = options.color;\r\n    }\r\n  }\r\n}\r\n\r\nexport function LOADING_FACTORY_PROVIDER_FACTORY(\r\n    parent: TdLoadingFactory, componentFactoryResolver: ComponentFactoryResolver, overlay: Overlay, injector: Injector): TdLoadingFactory {\r\n  return parent || new TdLoadingFactory(componentFactoryResolver, overlay, injector);\r\n}\r\n\r\nexport const LOADING_FACTORY_PROVIDER: Provider = {\r\n  // If there is already a service available, use that. Otherwise, provide a new one.\r\n  provide: TdLoadingFactory,\r\n  deps: [[new Optional(), new SkipSelf(), TdLoadingFactory], ComponentFactoryResolver, Overlay, Injector],\r\n  useFactory: LOADING_FACTORY_PROVIDER_FACTORY,\r\n};\r\n",
    "import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\r\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\n\r\nimport { TdLoadingContext } from '../directives/loading.directive';\r\nimport { TdLoadingComponent, LoadingMode, LoadingStrategy, LoadingType } from '../loading.component';\r\nimport { TdLoadingFactory, ILoadingRef } from './loading.factory';\r\n\r\nexport interface ITdLoadingConfig {\r\n  name: string;\r\n  type?: LoadingType;\r\n  mode?: LoadingMode;\r\n  color?: 'primary' | 'accent' | 'warn';\r\n}\r\n\r\nexport class TdLoadingConfig implements ITdLoadingConfig {\r\n  name: string;\r\n  type?: LoadingType;\r\n  mode?: LoadingMode;\r\n  color?: 'primary' | 'accent' | 'warn';\r\n\r\n  constructor(config: ITdLoadingConfig) {\r\n    this.name = config.name;\r\n    if (!this.name) {\r\n      throw Error('Name is required for [TdLoading] configuration.');\r\n    }\r\n    this.mode = config.mode ? config.mode : LoadingMode.Indeterminate;\r\n    this.type = config.type ? config.type : LoadingType.Circular;\r\n    this.color = config.color ? config.color : 'primary';\r\n  }\r\n}\r\n\r\nexport interface ITdLoadingDirectiveConfig extends ITdLoadingConfig {\r\n  strategy?: LoadingStrategy;\r\n}\r\n\r\nexport class TdLoadingDirectiveConfig extends TdLoadingConfig implements ITdLoadingDirectiveConfig {\r\n  name: string;\r\n  type: LoadingType;\r\n  mode: LoadingMode;\r\n  strategy: LoadingStrategy;\r\n\r\n  constructor(config: ITdLoadingDirectiveConfig) {\r\n    super(config);\r\n    this.strategy = config.strategy ? config.strategy : LoadingStrategy.Replace;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class TdLoadingService {\r\n\r\n  private _context: {[key: string]: ILoadingRef} = {};\r\n  private _timeouts: {[key: string]: any} = {};\r\n\r\n  constructor(private _loadingFactory: TdLoadingFactory) {\r\n    this.create({\r\n      name: 'td-loading-main',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * params:\r\n   * - config: ILoadingDirectiveConfig\r\n   * - viewContainerRef: ViewContainerRef\r\n   * - templateRef: TemplateRef<Object>\r\n   *\r\n   * Creates an replace loading mask and attaches it to the viewContainerRef.\r\n   * Replaces the templateRef with the mask when a request is registered on it.\r\n   *\r\n   * NOTE: @internal usage only.\r\n   */\r\n  createComponent(config: ITdLoadingDirectiveConfig, viewContainerRef: ViewContainerRef,\r\n                  templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\r\n    let directiveConfig: TdLoadingDirectiveConfig = new TdLoadingDirectiveConfig(config);\r\n    if (this._context[directiveConfig.name]) {\r\n      throw Error(`Name duplication: [TdLoading] directive has a name conflict with ${directiveConfig.name}.`);\r\n    }\r\n    if (directiveConfig.strategy === LoadingStrategy.Overlay) {\r\n      this._context[directiveConfig.name] = this._loadingFactory.createOverlayComponent(directiveConfig, viewContainerRef, templateRef);\r\n    } else {\r\n      this._context[directiveConfig.name] = this._loadingFactory.createReplaceComponent(directiveConfig, viewContainerRef, templateRef, context);\r\n    }\r\n    return this._context[directiveConfig.name];\r\n  }\r\n\r\n  /**\r\n   * params:\r\n   * - config: ITdLoadingConfig\r\n   *\r\n   * Creates a fullscreen loading mask and attaches it to the DOM with the given configuration.\r\n   * Only displayed when the mask has a request registered on it.\r\n   */\r\n  public create(config: ITdLoadingConfig): void {\r\n    let fullscreenConfig: TdLoadingConfig = new TdLoadingConfig(config);\r\n    this.removeComponent(fullscreenConfig.name);\r\n    this._context[fullscreenConfig.name] = this._loadingFactory.createFullScreenComponent(fullscreenConfig);\r\n  }\r\n\r\n  /**\r\n   * params:\r\n   * - name: string\r\n   *\r\n   * Removes `loading` component from service context.\r\n   */\r\n  public removeComponent(name: string): void {\r\n    if (this._context[name]) {\r\n      this._context[name].subject.unsubscribe();\r\n      if (this._context[name].componentRef) {\r\n        this._context[name].componentRef.destroy();\r\n      }\r\n      this._context[name] = undefined;\r\n      delete this._context[name];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * params:\r\n   * - name: string\r\n   * - registers?: number\r\n   * returns: true if successful\r\n   *\r\n   * Resolves a request for the loading mask referenced by the name parameter.\r\n   * Can optionally pass registers argument to set a number of register calls.\r\n   *\r\n   * If no paramemeters are used, then default main mask will be used.\r\n   *\r\n   * e.g. loadingService.register()\r\n   */\r\n  public register(name: string = 'td-loading-main', registers: number = 1): boolean {\r\n    // try registering into the service if the loading component has been instanciated or if it exists.\r\n    if (this._context[name]) {\r\n      registers = registers < 1 ? 1 : registers;\r\n      this._context[name].times += registers;\r\n      this._context[name].subject.next(this._context[name].times);\r\n      return true;\r\n    } else {\r\n      // if it doesnt exist, set a timeout so its registered after change detection happens\r\n      // this in case \"register\" occured on the `ngOnInit` lifehook cycle.\r\n      if (!this._timeouts[name]) {\r\n        this._timeouts[name] = setTimeout(() => {\r\n          this.register(name, registers);\r\n        });\r\n      } else {\r\n        // if it timeout occured and still doesnt exist, it means the tiemout wasnt needed so we clear it.\r\n        this._clearTimeout(name);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * params:\r\n   * - name: string\r\n   * - resolves?: number\r\n   * returns: true if successful\r\n   *\r\n   * Resolves a request for the loading mask referenced by the name parameter.\r\n   * Can optionally pass resolves argument to set a number of resolve calls.\r\n   *\r\n   * If no paramemeters are used, then default main mask will be used.\r\n   *\r\n   * e.g. loadingService.resolve()\r\n   */\r\n  public resolve(name: string = 'td-loading-main', resolves: number = 1): boolean {\r\n    // clear timeout if the loading component is \"resolved\" before its \"registered\"\r\n    this._clearTimeout(name);\r\n    if (this._context[name]) {\r\n      resolves = resolves < 1 ? 1 : resolves;\r\n      if (this._context[name].times > 0) {\r\n        let times: number = this._context[name].times;\r\n        times -= resolves;\r\n        this._context[name].times = times < 0 ? 0 : times;\r\n      }\r\n      this._context[name].subject.next(this._context[name].times);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * params:\r\n   * - name: string\r\n   * returns: true if successful\r\n   *\r\n   * Resolves all request for the loading mask referenced by the name parameter.\r\n   *\r\n   * If no paramemeters are used, then default main mask will be used.\r\n   *\r\n   * e.g. loadingService.resolveAll()\r\n   */\r\n  public resolveAll(name: string = 'td-loading-main'): boolean {\r\n    // clear timeout if the loading component is \"resolved\" before its \"registered\"\r\n    this._clearTimeout(name);\r\n    if (this._context[name]) {\r\n      this._context[name].times = 0;\r\n      this._context[name].subject.next(this._context[name].times);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * params:\r\n   * - name: string\r\n   * - value: number\r\n   * returns: true if successful\r\n   *\r\n   * Set value on a loading mask referenced by the name parameter.\r\n   * Usage only available if its mode is 'determinate' and if loading is showing.\r\n   */\r\n  public setValue(name: string, value: number): boolean {\r\n    if (this._context[name]) {\r\n      let instance: TdLoadingComponent = this._context[name].componentRef.instance;\r\n      if (instance.mode === LoadingMode.Determinate && instance.animation) {\r\n        instance.value = value;\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Clears timeout linked to the name.\r\n   * @param name Name of the loading component to be cleared\r\n   */\r\n  private _clearTimeout(name: string): void {\r\n    clearTimeout(this._timeouts[name]);\r\n    delete this._timeouts[name];\r\n  }\r\n}\r\n\r\nexport function LOADING_PROVIDER_FACTORY(\r\n    parent: TdLoadingService, loadingFactory: TdLoadingFactory): TdLoadingService {\r\n  return parent || new TdLoadingService(loadingFactory);\r\n}\r\n\r\nexport const LOADING_PROVIDER: Provider = {\r\n  // If there is already a service available, use that. Otherwise, provide a new one.\r\n  provide: TdLoadingService,\r\n  deps: [[new Optional(), new SkipSelf(), TdLoadingService], TdLoadingFactory],\r\n  useFactory: LOADING_PROVIDER_FACTORY,\r\n};\r\n",
    "import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\r\n\r\nimport { LoadingType, LoadingMode, LoadingStrategy, TdLoadingComponent } from '../loading.component';\r\nimport { TdLoadingService } from '../services/loading.service';\r\nimport { ILoadingRef } from '../services/loading.factory';\r\n\r\n/**\r\n * Context class for variable reference\r\n */\r\nexport class TdLoadingContext {\r\n  public $implicit: any = undefined;\r\n  public tdLoading: any = undefined;\r\n}\r\n\r\n// Constant for generation of the id for the next component\r\nlet TD_LOADING_NEXT_ID: number = 0;\r\n\r\n@Directive({\r\n  selector: '[tdLoading]',\r\n})\r\nexport class TdLoadingDirective implements OnInit, OnDestroy {\r\n\r\n  private _context: TdLoadingContext = new TdLoadingContext();\r\n  private _type: LoadingType;\r\n  private _mode: LoadingMode;\r\n  private _strategy: LoadingStrategy;\r\n  private _name: string;\r\n  private _loadingRef: ILoadingRef;\r\n\r\n  /**\r\n   * tdLoading: string\r\n   * Name reference of the loading mask, used to register/resolve requests to the mask.\r\n   */\r\n  @Input('tdLoading')\r\n  set name(name: string) {\r\n    if (!this._name) {\r\n      if (name) {\r\n        this._name = name;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tdLoadingUntil?: any\r\n   * If its null, undefined or false it will be used to register requests to the mask.\r\n   * Else if its any value that can be resolved as true, it will resolve the mask.\r\n   * [name] is optional when using [until], but can still be used to register/resolve it manually.\r\n   */\r\n  @Input('tdLoadingUntil')\r\n  set until(until: any) {\r\n    if (!this._name) {\r\n      this._name = 'td-loading-until-' + TD_LOADING_NEXT_ID++;\r\n    }\r\n    this._context.$implicit = this._context.tdLoading = until;\r\n    if (!until) {\r\n      this._loadingService.register(this._name);\r\n    } else {\r\n      this._loadingService.resolveAll(this._name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tdLoadingType?: LoadingType or ['linear' | 'circular']\r\n   * Sets the type of loading mask depending on value.\r\n   * Defaults to [LoadingType.Circular | 'circular'].\r\n   */\r\n  @Input('tdLoadingType')\r\n  set type(type: LoadingType) {\r\n    switch (type) {\r\n      case LoadingType.Linear:\r\n        this._type = LoadingType.Linear;\r\n        break;\r\n      default:\r\n        this._type = LoadingType.Circular;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tdLoadingMode?: LoadingMode or ['determinate' | 'indeterminate']\r\n   * Sets the mode of loading mask depending on value.\r\n   * Defaults to [LoadingMode.Indeterminate | 'indeterminate'].\r\n   */\r\n  @Input('tdLoadingMode')\r\n  set mode(mode: LoadingMode) {\r\n    switch (mode) {\r\n      case LoadingMode.Determinate:\r\n        this._mode = LoadingMode.Determinate;\r\n        break;\r\n      default:\r\n        this._mode = LoadingMode.Indeterminate;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tdLoadingStrategy?: LoadingStrategy or ['replace' | 'overlay']\r\n   * Sets the strategy of loading mask depending on value.\r\n   * Defaults to [LoadingMode.Replace | 'replace'].\r\n   */\r\n  @Input('tdLoadingStrategy')\r\n  set strategy(stategy: LoadingStrategy) {\r\n    switch (stategy) {\r\n      case LoadingStrategy.Overlay:\r\n        this._strategy = LoadingStrategy.Overlay;\r\n        break;\r\n      default:\r\n        this._strategy = LoadingStrategy.Replace;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tdLoadingColor?: \"primary\" | \"accent\" | \"warn\"\r\n   * Sets the theme color of the loading component. Defaults to \"primary\"\r\n   */\r\n  @Input('tdLoadingColor') color: 'primary' | 'accent' | 'warn' = 'primary';\r\n\r\n  constructor(private _viewContainerRef: ViewContainerRef,\r\n              private _templateRef: TemplateRef<TdLoadingContext>,\r\n              private _loadingService: TdLoadingService) {}\r\n\r\n  /**\r\n   * Registers component in the DOM, so it will be available when calling resolve/register.\r\n   */\r\n  ngOnInit(): void {\r\n    this._registerComponent();\r\n  }\r\n\r\n  /**\r\n   * Remove component when directive is destroyed.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this._loadingService.removeComponent(this._name);\r\n    this._loadingRef = undefined;\r\n  }\r\n\r\n  /**\r\n   * Creates [TdLoadingComponent] and attaches it to this directive's [ViewContainerRef].\r\n   * Passes this directive's [TemplateRef] to modify DOM depending on loading `strategy`.\r\n   */\r\n  private _registerComponent(): void {\r\n    if (!this._name) {\r\n      throw new Error('Name is needed to register loading directive');\r\n    }\r\n    // Check if `TdLoadingComponent` has been created before trying to add one again.\r\n    // There is a weird edge case when using `[routerLinkActive]` that calls the `ngOnInit` twice in a row\r\n    if (!this._loadingRef) {\r\n      this._loadingRef = this._loadingService.createComponent({\r\n        name: this._name,\r\n        type: this._type,\r\n        mode: this._mode,\r\n        color: this.color,\r\n        strategy: this._strategy,\r\n      }, this._viewContainerRef, this._templateRef, this._context);\r\n    }\r\n  }\r\n}\r\n",
    "import { Type } from '@angular/core';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\nimport { TdLoadingService, LOADING_PROVIDER } from './services/loading.service';\r\nimport { TdLoadingFactory, LOADING_FACTORY_PROVIDER } from './services/loading.factory';\r\nimport { TdLoadingDirective } from './directives/loading.directive';\r\nimport { TdLoadingComponent } from './loading.component';\r\n\r\nconst TD_LOADING: Type<any>[] = [\r\n  TdLoadingComponent,\r\n  TdLoadingDirective,\r\n];\r\n\r\nconst TD_LOADING_ENTRY_COMPONENTS: Type<any>[] = [\r\n  TdLoadingComponent,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n  ],\r\n  declarations: [\r\n    TD_LOADING,\r\n  ],\r\n  exports: [\r\n    TD_LOADING,\r\n  ],\r\n  providers: [\r\n    LOADING_FACTORY_PROVIDER,\r\n    LOADING_PROVIDER,\r\n  ],\r\n  entryComponents: [\r\n    TD_LOADING_ENTRY_COMPONENTS,\r\n  ],\r\n})\r\nexport class CovalentLoadingModule {\r\n\r\n}\r\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "Circular",
    "Linear",
    "Determinate",
    "Indeterminate",
    "Overlay",
    "Replace",
    "FullScreen",
    "None",
    "TD_CIRCLE_DIAMETER",
    "TdLoadingComponent",
    "_elementRef",
    "_changeDetectorRef",
    "this",
    "_animationIn",
    "Subject",
    "_animationOut",
    "_mode",
    "LoadingMode",
    "_defaultMode",
    "_value",
    "_circleDiameter",
    "animation",
    "style",
    "LoadingStyle",
    "type",
    "LoadingType",
    "color",
    "defineProperty",
    "prototype",
    "get",
    "set",
    "mode",
    "value",
    "markForCheck",
    "ngDoCheck",
    "isOverlay",
    "_hostHeight",
    "_setCircleDiameter",
    "getHeight",
    "isFullScreen",
    "undefined",
    "height",
    "getCircleDiameter",
    "getCircleStrokeWidth",
    "strokeWidth",
    "Math",
    "abs",
    "isCircular",
    "isLinear",
    "animationComplete",
    "event",
    "fromState",
    "outAnimationCompleted",
    "inAnimationCompleted",
    "next",
    "startInAnimation",
    "asObservable",
    "startOutAnimation",
    "diameter",
    "floor",
    "getBoundingClientRect",
    "Component",
    "args",
    "selector",
    "styles",
    "template",
    "animations",
    "TdFadeInOutAnimation",
    "ElementRef",
    "ChangeDetectorRef",
    "TdLoadingFactory",
    "_componentFactoryResolver",
    "_overlay",
    "_injector",
    "createFullScreenComponent",
    "options",
    "_this",
    "overlayRef",
    "loadingRef",
    "_initializeContext",
    "loading",
    "observable",
    "subscribe",
    "registered",
    "_createOverlay",
    "componentRef",
    "attach",
    "ComponentPortal",
    "_mapOptions",
    "instance",
    "changeDetectorRef",
    "detectChanges",
    "subs_1",
    "unsubscribe",
    "destroy",
    "detach",
    "dispose",
    "createOverlayComponent",
    "viewContainerRef",
    "templateRef",
    "_createComponent",
    "content",
    "TemplatePortal",
    "clear",
    "insert",
    "hostView",
    "createReplaceComponent",
    "context",
    "nativeElement",
    "elementRef",
    "nextElementSibling",
    "scrollHeight",
    "createEmbeddedView",
    "indexOf",
    "subs_2",
    "cdr",
    "state",
    "OverlayConfig",
    "hasBackdrop",
    "positionStrategy",
    "position",
    "global",
    "centerHorizontally",
    "centerVertically",
    "create",
    "compRef",
    "resolveComponentFactory",
    "subject",
    "times",
    "LOADING_FACTORY_PROVIDER_FACTORY",
    "parent",
    "componentFactoryResolver",
    "overlay",
    "injector",
    "Injectable",
    "ComponentFactoryResolver",
    "Injector",
    "LOADING_FACTORY_PROVIDER",
    "provide",
    "deps",
    "Optional",
    "SkipSelf",
    "useFactory",
    "TdLoadingConfig",
    "config",
    "name",
    "Error",
    "TdLoadingDirectiveConfig",
    "_super",
    "call",
    "strategy",
    "LoadingStrategy",
    "__",
    "constructor",
    "tslib_1.__extends",
    "TdLoadingService",
    "_loadingFactory",
    "_context",
    "_timeouts",
    "createComponent",
    "directiveConfig",
    "fullscreenConfig",
    "removeComponent",
    "register",
    "registers",
    "_clearTimeout",
    "setTimeout",
    "resolve",
    "resolves",
    "resolveAll",
    "setValue",
    "clearTimeout",
    "LOADING_PROVIDER_FACTORY",
    "loadingFactory",
    "LOADING_PROVIDER",
    "TdLoadingContext",
    "$implicit",
    "tdLoading",
    "TD_LOADING_NEXT_ID",
    "TdLoadingDirective",
    "_viewContainerRef",
    "_templateRef",
    "_loadingService",
    "_name",
    "until",
    "_type",
    "stategy",
    "_strategy",
    "ngOnInit",
    "_registerComponent",
    "ngOnDestroy",
    "_loadingRef",
    "Directive",
    "ViewContainerRef",
    "TemplateRef",
    "Input",
    "TD_LOADING",
    "TD_LOADING_ENTRY_COMPONENTS",
    "CovalentLoadingModule",
    "NgModule",
    "imports",
    "CommonModule",
    "MatProgressBarModule",
    "MatProgressSpinnerModule",
    "OverlayModule",
    "PortalModule",
    "declarations",
    "exports",
    "providers",
    "entryComponents"
  ],
  "mappings": "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"
}
