{
  "version": 3,
  "file": "covalent-core-paging.umd.min.js",
  "sources": [
    "ng://@covalent/core/paging/out/paging-bar.component.ts",
    "ng://@covalent/core/paging/out/paging.module.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, Output, EventEmitter, OnInit, Optional, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { Dir } from '@angular/cdk/bidi';\r\n\r\nexport interface IPageChangeEvent {\r\n  page: number;\r\n  maxPage: number;\r\n  pageSize: number;\r\n  total: number;\r\n  fromRow: number;\r\n  toRow: number;\r\n}\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'td-paging-bar',\r\n  template: `<div class=\"td-paging-bar\" (change)=\"$event.stopPropagation()\" >\r\n  <ng-content></ng-content>\r\n  <div class=\"td-paging-bar-navigation\">\r\n    <button mat-icon-button class=\"td-paging-bar-first-page\" type=\"button\" *ngIf=\"firstLast\" [disabled]=\"isMinPage()\" (click)=\"firstPage()\">\r\n      <mat-icon>{{ isRTL ? 'skip_next' : 'skip_previous' }}</mat-icon>\r\n    </button>\r\n    <button mat-icon-button class=\"td-paging-bar-prev-page\" type=\"button\" [disabled]=\"isMinPage()\" (click)=\"prevPage()\">\r\n      <mat-icon>{{ isRTL ? 'navigate_next' : 'navigate_before' }}</mat-icon>\r\n    </button>\r\n    <ng-template *ngIf=\"pageLinkCount > 0\" let-link let-index=\"index\" ngFor [ngForOf]=\"pageLinks\">\r\n      <button class=\"td-paging-bar-link-page\" mat-icon-button type=\"button\" [color]=\"page === link ? 'accent' : ''\" (click)=\"navigateToPage(link)\">{{link}}</button>\r\n    </ng-template>\r\n    <button mat-icon-button class=\"td-paging-bar-next-page\" type=\"button\" [disabled]=\"isMaxPage()\" (click)=\"nextPage()\">\r\n      <mat-icon>{{ isRTL ? 'navigate_before' : 'navigate_next' }}</mat-icon>\r\n    </button>\r\n    <button mat-icon-button class=\"td-paging-bar-last-page\" type=\"button\" *ngIf=\"firstLast\" [disabled]=\"isMaxPage()\" (click)=\"lastPage()\">\r\n      <mat-icon>{{ isRTL ? 'skip_previous' : 'skip_next' }}</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>`,\r\n  styles: [`:host{display:block}:host .td-paging-bar{height:48px;-webkit-box-sizing:border-box;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;max-width:100%;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}:host .td-paging-bar ::ng-deep>*{margin:0 10px}:host .td-paging-bar [mat-icon-button]{font-size:12px;font-weight:400}`],\r\n})\r\nexport class TdPagingBarComponent implements OnInit {\r\n\r\n  private _pageSize: number = 50;\r\n  private _total: number = 0;\r\n  private _page: number = 1;\r\n  private _fromRow: number = 1;\r\n  private _toRow: number = 1;\r\n  private _initialized: boolean = false;\r\n  private _pageLinks: number[] = [];\r\n  private _pageLinkCount: number = 0;\r\n  // special case when 2 pageLinks, detect when hit end of pages so can lead in correct direction\r\n  private _hitEnd: boolean = false;\r\n    // special case when 2 pageLinks, detect when hit start of pages so can lead in correct direction\r\n  private _hitStart: boolean = false;\r\n\r\n  /**\r\n   * firstLast?: boolean\r\n   * Shows or hides the first and last page buttons of the paging bar. Defaults to 'false'\r\n   */\r\n  @Input('firstLast') firstLast: boolean = true;\r\n\r\n  /**\r\n   * initialPage?: number\r\n   * Sets starting page for the paging bar. Defaults to '1'\r\n   */\r\n  @Input('initialPage') initialPage: number = 1;\r\n\r\n  /**\r\n   * pageLinkCount?: number\r\n   * Amount of page navigation links for the paging bar. Defaults to '0'\r\n   */\r\n  @Input('pageLinkCount')\r\n  set pageLinkCount(pageLinkCount: number) {\r\n    this._pageLinkCount = coerceNumberProperty(pageLinkCount);\r\n    this._calculatePageLinks();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  get pageLinkCount(): number {\r\n    return this._pageLinkCount;\r\n  }\r\n\r\n  /**\r\n   * pageSize?: number\r\n   * Selected page size for the pagination. Defaults 50.\r\n   */\r\n  @Input('pageSize')\r\n  set pageSize(pageSize: number) {\r\n    this._pageSize = coerceNumberProperty(pageSize);\r\n    this._page = 1;\r\n    if (this._initialized) {\r\n      this._handleOnChange();\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  get pageSize(): number {\r\n    return this._pageSize;\r\n  }\r\n\r\n  /**\r\n   * total: number\r\n   * Total rows for the pagination.\r\n   */\r\n  @Input('total')\r\n  set total(total: number) {\r\n    this._total = coerceNumberProperty(total);\r\n    this._calculateRows();\r\n    this._calculatePageLinks();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  get total(): number {\r\n    return this._total;\r\n  }\r\n\r\n  /**\r\n   * pageLinks: number[]\r\n   * Returns the pageLinks in an array\r\n   */\r\n  get pageLinks(): number[] {\r\n    return this._pageLinks;\r\n  }\r\n\r\n  /**\r\n   * range: string\r\n   * Returns the range of the rows.\r\n   */\r\n  get range(): string {\r\n    return `${!this._toRow ? 0 : this._fromRow}-${this._toRow}`;\r\n  }\r\n\r\n  /**\r\n   * page: number\r\n   * Returns the current page.\r\n   */\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  /**\r\n   * page: number\r\n   * Returns the max page for the current pageSize and total.\r\n   */\r\n  get maxPage(): number {\r\n    return Math.ceil(this._total / this._pageSize);\r\n  }\r\n\r\n  /**\r\n   * change?: function\r\n   * Method to be executed when page size changes or any button is clicked in the paging bar.\r\n   * Emits an [IPageChangeEvent] implemented object.\r\n   */\r\n  @Output('change') onChange: EventEmitter<IPageChangeEvent> = new EventEmitter<IPageChangeEvent>();\r\n\r\n  get isRTL(): boolean {\r\n    if (this._dir) {\r\n      return this._dir.dir === 'rtl';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  constructor(@Optional() private _dir: Dir,\r\n              private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this._page = coerceNumberProperty(this.initialPage);\r\n    this._calculateRows();\r\n    this._calculatePageLinks();\r\n    this._initialized = true;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * navigateToPage?: function\r\n   * Navigates to a specific valid page. Returns 'true' if page is valid, else 'false'.\r\n   */\r\n  navigateToPage(page: number): boolean {\r\n    if (page === 1 || (page >= 1 && page <= this.maxPage)) {\r\n      this._page = coerceNumberProperty(Math.floor(page));\r\n      this._handleOnChange();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * firstPage?: function\r\n   * Navigates to the first page. Returns 'true' if page is valid, else 'false'.\r\n   */\r\n  firstPage(): boolean {\r\n    return this.navigateToPage(1);\r\n  }\r\n\r\n  /**\r\n   * prevPage?: function\r\n   * Navigates to the previous page. Returns 'true' if page is valid, else 'false'.\r\n   */\r\n  prevPage(): boolean {\r\n    return this.navigateToPage(this._page - 1);\r\n  }\r\n\r\n  /**\r\n   * nextPage?: function\r\n   * Navigates to the next page. Returns 'true' if page is valid, else 'false'.\r\n   */\r\n  nextPage(): boolean {\r\n    return this.navigateToPage(this._page + 1);\r\n  }\r\n\r\n  /**\r\n   * lastPage?: function\r\n   * Navigates to the last page. Returns 'true' if page is valid, else 'false'.\r\n   */\r\n  lastPage(): boolean {\r\n    return this.navigateToPage(this.maxPage);\r\n  }\r\n\r\n  isMinPage(): boolean {\r\n    return this._page <= 1;\r\n  }\r\n\r\n  isMaxPage(): boolean {\r\n    return this._page >= this.maxPage;\r\n  }\r\n\r\n  private _calculateRows(): void {\r\n    let top: number = (this._pageSize * this._page);\r\n    this._fromRow = (this._pageSize * (this._page - 1)) + 1;\r\n    this._toRow = this._total > top ? top : this._total;\r\n  }\r\n\r\n  /**\r\n   * _calculatePageLinks?: function\r\n   * Calculates the page links that should be shown to the user based on the current state of the paginator\r\n   */\r\n  private _calculatePageLinks(): void {\r\n    // special case when 2 pageLinks, detect when hit end of pages so can lead in correct direction\r\n    if (this.isMaxPage()) {\r\n      this._hitEnd = true;\r\n      this._hitStart = false;\r\n    }\r\n    // special case when 2 pageLinks, detect when hit start of pages so can lead in correct direction\r\n    if (this.isMinPage()) {\r\n      this._hitEnd = false;\r\n      this._hitStart = true;\r\n    }\r\n    // If the pageLinkCount goes above max possible pages based on perpage setting then reset it to maxPage\r\n    let actualPageLinkCount: number = this.pageLinkCount;\r\n    if (this.pageLinkCount > this.maxPage) {\r\n      actualPageLinkCount = this.maxPage;\r\n    }\r\n    // reset the pageLinks array\r\n    this._pageLinks = [];\r\n    // fill in the array with the pageLinks based on the current selected page\r\n    let middlePageLinks: number = Math.floor(actualPageLinkCount / 2);\r\n    for (let x: number = 0; x < actualPageLinkCount; x++) {\r\n      // don't go past the maxPage in the pageLinks\r\n      // have to handle even and odd pageLinkCounts differently so can still lead to the next numbers\r\n      if ((actualPageLinkCount % 2 === 0 && (this.page + middlePageLinks > this.maxPage)) ||\r\n          (actualPageLinkCount % 2 !== 0 && (this.page + middlePageLinks >= this.maxPage))) {\r\n        this._pageLinks[x] = this.maxPage - (actualPageLinkCount - (x + 1));\r\n      // if the selected page is after the middle then set that page as middle and get the correct balance on left and right\r\n      // special handling when there are only 2 pageLinks to just drop to next if block so can lead to next numbers when moving to right\r\n      // when moving to the left then go into this block\r\n      } else if ((actualPageLinkCount > 2 || actualPageLinkCount <= 2 && this._hitEnd) && (this.page - middlePageLinks) > 0) {\r\n        this._pageLinks[x] = (this.page - middlePageLinks) + x;\r\n      // if the selected page is before the middle then set the pages based on the x index leading up to and after selected page\r\n      } else if ((this.page - middlePageLinks) <= 0) {\r\n        this._pageLinks[x] = x + 1;\r\n      // other wise just set the array in order starting from the selected page\r\n      } else {\r\n        this._pageLinks[x] = this.page + x;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _handleOnChange(): void {\r\n    this._calculateRows();\r\n    this._calculatePageLinks();\r\n    let event: IPageChangeEvent = {\r\n      page: this._page,\r\n      maxPage: this.maxPage,\r\n      pageSize: this._pageSize,\r\n      total: this._total,\r\n      fromRow: this._fromRow,\r\n      toRow: this._toRow,\r\n    };\r\n    this._changeDetectorRef.markForCheck();\r\n    this.onChange.emit(event);\r\n  }\r\n\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\nimport { TdPagingBarComponent } from './paging-bar.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n  declarations: [\r\n    TdPagingBarComponent,\r\n  ],\r\n  exports: [\r\n    TdPagingBarComponent,\r\n  ],\r\n})\r\nexport class CovalentPagingModule {\r\n\r\n}\r\n"
  ],
  "names": [
    "TdPagingBarComponent",
    "_dir",
    "_changeDetectorRef",
    "this",
    "_pageSize",
    "_total",
    "_page",
    "_fromRow",
    "_toRow",
    "_initialized",
    "_pageLinks",
    "_pageLinkCount",
    "_hitEnd",
    "_hitStart",
    "firstLast",
    "initialPage",
    "onChange",
    "EventEmitter",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "set",
    "pageLinkCount",
    "coerceNumberProperty",
    "_calculatePageLinks",
    "markForCheck",
    "pageSize",
    "_handleOnChange",
    "total",
    "_calculateRows",
    "Math",
    "ceil",
    "dir",
    "ngOnInit",
    "navigateToPage",
    "page",
    "maxPage",
    "floor",
    "firstPage",
    "prevPage",
    "nextPage",
    "lastPage",
    "isMinPage",
    "isMaxPage",
    "top",
    "actualPageLinkCount",
    "middlePageLinks",
    "x",
    "event",
    "fromRow",
    "toRow",
    "emit",
    "type",
    "Component",
    "args",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "selector",
    "template",
    "styles",
    "Dir",
    "decorators",
    "Optional",
    "ChangeDetectorRef",
    "Input",
    "Output",
    "CovalentPagingModule",
    "NgModule",
    "imports",
    "CommonModule",
    "MatIconModule",
    "MatButtonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
