{
  "version": 3,
  "file": "covalent-core-media.umd.min.js",
  "sources": [
    "ng://@covalent/core/media/out/services/media.service.ts",
    "ng://@covalent/core/media/out/directives/media-toggle.directive.ts",
    "ng://@covalent/core/media/out/media.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable, NgZone, SkipSelf, Optional, Provider } from '@angular/core';\r\nimport { Observable, BehaviorSubject, Subscription, fromEvent } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TdMediaService {\r\n\r\n  private _resizing: boolean = false;\r\n  private _globalSubscription: Subscription;\r\n  private _queryMap: Map<string, string> = new Map<string, string>();\r\n  private _querySources: { [key: string]: BehaviorSubject<boolean>} = {};\r\n  private _queryObservables: {[key: string]: Observable<boolean>} = {};\r\n\r\n  constructor(private _ngZone: NgZone) {\r\n    this._queryMap.set('xs', '(max-width: 599px)');\r\n    this._queryMap.set('gt-xs', '(min-width: 600px)');\r\n    this._queryMap.set('sm', '(min-width: 600px) and (max-width: 959px)');\r\n    this._queryMap.set('gt-sm', '(min-width: 960px)');\r\n    this._queryMap.set('md', '(min-width: 960px) and (max-width: 1279px)');\r\n    this._queryMap.set('gt-md', '(min-width: 1280px)');\r\n    this._queryMap.set('lg', '(min-width: 1280px) and (max-width: 1919px)');\r\n    this._queryMap.set('gt-lg', '(min-width: 1920px)');\r\n    this._queryMap.set('xl', '(min-width: 1920px)');\r\n    this._queryMap.set('landscape', '(orientation: landscape)');\r\n    this._queryMap.set('portrait', '(orientation: portrait)');\r\n    this._queryMap.set('print', 'print');\r\n\r\n    this._resizing = false;\r\n    // we make sure that the resize checking happend outside of Angular since it happens often\r\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\r\n      return fromEvent(window, 'resize').subscribe(() => {\r\n        // way to prevent the resize event from triggering the match media if there is already one event running already.\r\n        if (!this._resizing) {\r\n          this._resizing = true;\r\n          setTimeout(() => {\r\n            this._onResize();\r\n            this._resizing = false;\r\n          }, 100);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deregisters a query so its stops being notified or used.\r\n   */\r\n  deregisterQuery(query: string): void {\r\n    if (this._queryMap.get(query.toLowerCase())) {\r\n      query = this._queryMap.get(query.toLowerCase());\r\n    }\r\n    this._querySources[query].unsubscribe();\r\n    delete this._querySources[query];\r\n    delete this._queryObservables[query];\r\n  }\r\n\r\n  /**\r\n   * Used to evaluate whether a given media query is true or false given the current device's screen / window size.\r\n   */\r\n  public query(query: string): boolean {\r\n    if (this._queryMap.get(query.toLowerCase())) {\r\n      query = this._queryMap.get(query.toLowerCase());\r\n    }\r\n    return this._ngZone.run(() => {\r\n      return matchMedia(query).matches;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers a media query and returns an [Observable] that will re-evaluate and\r\n   * return if the given media query matches on window resize.\r\n   * Note: don't forget to unsubscribe from [Observable] when finished watching.\r\n   */\r\n  public registerQuery(query: string): Observable<boolean> {\r\n    if (this._queryMap.get(query.toLowerCase())) {\r\n      query = this._queryMap.get(query.toLowerCase());\r\n    }\r\n    if (!this._querySources[query]) {\r\n      this._querySources[query] = new BehaviorSubject<boolean>(matchMedia(query).matches);\r\n      this._queryObservables[query] = this._querySources[query].asObservable();\r\n    }\r\n    return this._queryObservables[query];\r\n  }\r\n\r\n  /**\r\n   * Trigger a match media event on all subscribed observables.\r\n   */\r\n  public broadcast(): void {\r\n    this._onResize();\r\n  }\r\n\r\n  private _onResize(): void {\r\n    for (let query in this._querySources) {\r\n      this._ngZone.run(() => {\r\n        this._matchMediaTrigger(query);\r\n      });\r\n    }\r\n  }\r\n\r\n  private _matchMediaTrigger(query: string): void {\r\n    this._querySources[query].next(matchMedia(query).matches);\r\n  }\r\n}\r\n\r\nexport function MEDIA_PROVIDER_FACTORY(\r\n    parent: TdMediaService, ngZone: NgZone): TdMediaService {\r\n  return parent || new TdMediaService(ngZone);\r\n}\r\n\r\nexport const MEDIA_PROVIDER: Provider = {\r\n  // If there is already a service available, use that. Otherwise, provide a new one.\r\n  provide: TdMediaService,\r\n  deps: [[new Optional(), new SkipSelf(), TdMediaService], NgZone],\r\n  useFactory: MEDIA_PROVIDER_FACTORY,\r\n};\r\n",
    "import { Directive, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { Renderer2 } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { TdMediaService } from '../services/media.service';\r\n\r\n@Directive({\r\n  selector: '[tdMediaToggle]',\r\n})\r\nexport class TdMediaToggleDirective implements OnInit, OnDestroy {\r\n\r\n  private _subscription: Subscription;\r\n\r\n  private _query: string;\r\n  private _matches: boolean = false;\r\n  private _attributes: {[key: string]: string} = {};\r\n  private _styles: {[key: string]: string} = {};\r\n  private _classes: string[] = [];\r\n\r\n  /**\r\n   * tdMediaToggle: string\r\n   * Media query used to evaluate screen/window size.\r\n   * Toggles attributes, classes and styles if media query is matched.\r\n   */\r\n  @Input('tdMediaToggle')\r\n  set query(query: string) {\r\n    if (!query) {\r\n      throw new Error('Query needed for [tdMediaToggle] directive.');\r\n    }\r\n    this._query = query;\r\n  }\r\n\r\n  /**\r\n   * mediaAttributes: {[key: string]: string}\r\n   * Attributes to be toggled when media query matches.\r\n   */\r\n  @Input('mediaAttributes')\r\n  set attributes(attributes: any) {\r\n    this._attributes = attributes;\r\n  }\r\n\r\n  /**\r\n   * mediaClasses: string[]\r\n   * CSS Classes to be toggled when media query matches.\r\n   */\r\n  @Input('mediaClasses')\r\n  set classes(classes: string[]) {\r\n    this._classes = classes;\r\n  }\r\n\r\n  /**\r\n   * mediaStyles: {[key: string]: string}\r\n   * CSS Styles to be toggled when media query matches.\r\n   */\r\n  @Input('mediaStyles')\r\n  set styles(styles: any) {\r\n    this._styles = styles;\r\n  }\r\n\r\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef, private _mediaService: TdMediaService) { }\r\n\r\n  ngOnInit(): void {\r\n    this._mediaChange(this._mediaService.query(this._query));\r\n    this._subscription = this._mediaService.registerQuery(this._query).subscribe((matches: boolean) => {\r\n      this._mediaChange(matches);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._subscription) {\r\n      this._subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private _mediaChange(matches: boolean): void {\r\n    this._matches = matches;\r\n    this._changeAttributes();\r\n    this._changeClasses();\r\n    this._changeStyles();\r\n  }\r\n\r\n  private _changeAttributes(): void {\r\n    for (let attr in this._attributes) {\r\n      if (this._matches) {\r\n        this._renderer.setAttribute(this._elementRef.nativeElement, attr, this._attributes[attr]);\r\n      } else {\r\n        this._renderer.removeAttribute(this._elementRef.nativeElement, attr);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _changeClasses(): void {\r\n    this._classes.forEach((className: string) => {\r\n      if (this._matches) {\r\n        this._renderer.addClass(this._elementRef.nativeElement, className);\r\n      } else {\r\n        this._renderer.removeClass(this._elementRef.nativeElement, className);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _changeStyles(): void {\r\n    for (let style in this._styles) {\r\n      if (this._matches) {\r\n        this._renderer.setStyle(this._elementRef.nativeElement, style, this._styles[style]);\r\n      } else {\r\n        this._renderer.removeStyle(this._elementRef.nativeElement, style);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import { Type } from '@angular/core';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MEDIA_PROVIDER } from './services/media.service';\r\nimport { TdMediaToggleDirective } from './directives/media-toggle.directive';\r\n\r\nconst TD_MEDIA: Type<any>[] = [\r\n  TdMediaToggleDirective,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    TD_MEDIA,\r\n  ],\r\n  exports: [\r\n    TD_MEDIA,\r\n  ],\r\n  providers: [\r\n    MEDIA_PROVIDER,\r\n  ],\r\n})\r\nexport class CovalentMediaModule {\r\n\r\n}\r\n"
  ],
  "names": [
    "TdMediaService",
    "_ngZone",
    "_this",
    "this",
    "_resizing",
    "_queryMap",
    "Map",
    "_querySources",
    "_queryObservables",
    "set",
    "_globalSubscription",
    "runOutsideAngular",
    "fromEvent",
    "window",
    "subscribe",
    "setTimeout",
    "_onResize",
    "prototype",
    "deregisterQuery",
    "query",
    "get",
    "toLowerCase",
    "unsubscribe",
    "run",
    "matchMedia",
    "matches",
    "registerQuery",
    "BehaviorSubject",
    "asObservable",
    "broadcast",
    "_loop_1",
    "this_1",
    "_matchMediaTrigger",
    "next",
    "MEDIA_PROVIDER_FACTORY",
    "parent",
    "ngZone",
    "type",
    "Injectable",
    "NgZone",
    "MEDIA_PROVIDER",
    "provide",
    "deps",
    "Optional",
    "SkipSelf",
    "useFactory",
    "TdMediaToggleDirective",
    "_renderer",
    "_elementRef",
    "_mediaService",
    "_matches",
    "_attributes",
    "_styles",
    "_classes",
    "Object",
    "defineProperty",
    "Error",
    "_query",
    "attributes",
    "classes",
    "styles",
    "ngOnInit",
    "_mediaChange",
    "_subscription",
    "ngOnDestroy",
    "_changeAttributes",
    "_changeClasses",
    "_changeStyles",
    "attr",
    "setAttribute",
    "nativeElement",
    "removeAttribute",
    "forEach",
    "className",
    "addClass",
    "removeClass",
    "style",
    "setStyle",
    "removeStyle",
    "Directive",
    "args",
    "selector",
    "Renderer2",
    "ElementRef",
    "Input",
    "TD_MEDIA",
    "CovalentMediaModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "providers"
  ],
  "mappings": "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"
}
