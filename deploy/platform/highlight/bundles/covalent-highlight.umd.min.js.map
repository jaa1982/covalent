{
  "version": 3,
  "file": "covalent-highlight.umd.min.js",
  "sources": [
    "ng://@covalent/highlight/out/highlight.component.ts",
    "ng://@covalent/highlight/out/highlight.module.ts"
  ],
  "sourcesContent": [
    "import { Component, AfterViewInit, ElementRef, Input, Output, EventEmitter, Renderer2, SecurityContext } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ndeclare const require: any;\r\n/* tslint:disable-next-line */\r\nlet hljs: any = require('highlight.js/lib');\r\n\r\n@Component({\r\n  selector: 'td-highlight',\r\n  styles: [`:host ::ng-deep{display:block;overflow-x:auto;padding:16px}:host ::ng-deep .highlight,:host ::ng-deep code,:host ::ng-deep pre{font-family:Menlo,Monaco,\"Andale Mono\",\"lucida console\",\"Courier New\",monospace}:host ::ng-deep pre{display:block;overflow-x:auto;padding:0;margin:0;background:0 0;font-family:Menlo,Monaco,\"Andale Mono\",\"lucida console\",\"Courier New\",monospace;line-height:1.45;-moz-tab-size:2;-o-tab-size:2;tab-size:2;-webkit-font-smoothing:auto;-webkit-text-size-adjust:none;position:relative;border-radius:2px;font-size:.8rem}:host ::ng-deep code{margin:0;padding:0;overflow-wrap:break-word;white-space:pre-wrap}:host ::ng-deep .highlight{display:block;overflow-wrap:break-word;line-height:1.5;margin:0}`],\r\n  template: `<ng-content></ng-content>`,\r\n})\r\nexport class TdHighlightComponent implements AfterViewInit {\r\n\r\n  private _content: string;\r\n\r\n  /**\r\n   * content?: string\r\n   *\r\n   * Code content to be parsed as highlighted html.\r\n   * Used to load data dynamically.\r\n   *\r\n   * e.g. `.html`, `.ts` , etc.\r\n   */\r\n  @Input('content')\r\n  set content(content: string) {\r\n    this._content = content;\r\n    this._loadContent(this._content);\r\n  }\r\n\r\n  /**\r\n   * lang?: string\r\n   *\r\n   * Language of the code content to be parsed as highlighted html.\r\n   * Defaults to `typescript`\r\n   *\r\n   * e.g. `typescript`, `html` , etc.\r\n   */\r\n  @Input('lang') language: string = 'typescript';\r\n\r\n  /**\r\n   * contentReady?: function\r\n   * Event emitted after the highlight content rendering is finished.\r\n   */\r\n  @Output('contentReady') onContentReady: EventEmitter<undefined> = new EventEmitter<undefined>();\r\n\r\n  constructor(private _renderer: Renderer2,\r\n              private _elementRef: ElementRef,\r\n              private _domSanitizer: DomSanitizer) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    if (!this.language) {\r\n      throw new Error('Error: language attribute must be defined in TdHighlightComponent.');\r\n    }\r\n    if (!this._content) {\r\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\r\n    }\r\n  }\r\n  /**\r\n   * General method to parse a string of code into HTML Elements and load them into the container\r\n   */\r\n  private _loadContent(code: string): void {\r\n    if (code && code.trim().length > 0) {\r\n      // Clean container\r\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\r\n      // Parse html string into actual HTML elements.\r\n      let preElement: HTMLPreElement = this._elementFromString(this._render(code));\r\n    }\r\n    this.onContentReady.emit();\r\n  }\r\n\r\n  private _elementFromString(codeStr: string): HTMLPreElement {\r\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\r\n    // to parse the string into DOM element for now.\r\n    const preElement: HTMLPreElement = this._renderer.createElement('pre');\r\n    this._renderer.appendChild(this._elementRef.nativeElement, preElement);\r\n    const codeElement: HTMLElement = this._renderer.createElement('code');\r\n    this._renderer.appendChild(preElement, codeElement);\r\n    // Set .highlight class into <code> element\r\n    this._renderer.addClass(codeElement, 'highlight');\r\n    codeElement.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, codeStr);\r\n    return preElement;\r\n  }\r\n\r\n  private _render(contents: string): string {\r\n    // Trim leading and trailing newlines\r\n    contents = contents.replace(/^(\\s|\\t)*\\n+/g, '')\r\n                       .replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\r\n    // Split markup by line characters\r\n    let lines: string[] = contents.split('\\n');\r\n\r\n    // check how much indentation is used by the first actual code line\r\n    let firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\r\n\r\n    // Remove all indentation spaces so code can be parsed correctly\r\n    let startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\r\n    lines = lines.map(function(line: string): string {\r\n      return line\r\n        .replace('=\"\"', '') // remove empty values\r\n        .replace(startingWhitespaceRegex, '')\r\n        .replace(/\\s+$/, ''); // remove trailing white spaces\r\n    });\r\n\r\n    let codeToParse: string =  lines.join('\\n')\r\n    .replace(/\\{ \\{/gi, '{{').replace(/\\} \\}/gi, '}}')\r\n    .replace(/&lt;/gi, '<').replace(/&gt;/gi, '>');  // replace with < and > to render HTML in Angular\r\n\r\n    // Parse code with highlight.js depending on language\r\n    let highlightedCode: any = hljs.highlight(this.language, codeToParse, true);\r\n    highlightedCode.value = highlightedCode.value\r\n      .replace(/=<span class=\"hljs-value\">\"\"<\\/span>/gi, '')\r\n      .replace('<head>', '')\r\n      .replace('<head/>', '');\r\n    return highlightedCode.value;\r\n  }\r\n}\r\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TdHighlightComponent } from './highlight.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    TdHighlightComponent,\r\n  ],\r\n  exports: [\r\n    TdHighlightComponent,\r\n  ],\r\n})\r\nexport class CovalentHighlightModule {\r\n\r\n}\r\n"
  ],
  "names": [
    "hljs",
    "require",
    "TdHighlightComponent",
    "_renderer",
    "_elementRef",
    "_domSanitizer",
    "this",
    "language",
    "onContentReady",
    "EventEmitter",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "content",
    "_content",
    "_loadContent",
    "ngAfterViewInit",
    "Error",
    "textContent",
    "code",
    "trim",
    "length",
    "setProperty",
    "nativeElement",
    "_elementFromString",
    "_render",
    "emit",
    "codeStr",
    "preElement",
    "createElement",
    "appendChild",
    "codeElement",
    "addClass",
    "innerHTML",
    "sanitize",
    "SecurityContext",
    "HTML",
    "contents",
    "lines",
    "replace",
    "split",
    "firstLineWhitespace",
    "match",
    "startingWhitespaceRegex",
    "RegExp",
    "codeToParse",
    "map",
    "line",
    "join",
    "highlightedCode",
    "highlight",
    "value",
    "type",
    "Component",
    "args",
    "selector",
    "styles",
    "template",
    "Renderer2",
    "ElementRef",
    "DomSanitizer",
    "Input",
    "Output",
    "CovalentHighlightModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "+bAKA,IAAIA,EAAYC,QAAQ,oBAOxBC,EAAA,WAkCE,SAAFA,EAAsBC,EACAC,EACAC,GAFAC,KAAtBH,UAAsBA,EACAG,KAAtBF,YAAsBA,EACAE,KAAtBD,cAAsBA,EAVtBC,KAAAC,SAAoC,aAMpCD,KAAAE,eAAoE,IAAIC,EAAAA,oBAnBxEC,OAAAC,eAAMT,EAANU,UAAA,UAAA,CAAAC,IAAA,SAAcC,GACVR,KAAKS,SAAWD,EAChBR,KAAKU,aAAaV,KAAKS,2CAuBzBb,EAAFU,UAAAK,gBAAE,WACE,IAAKX,KAAKC,SACR,MAAM,IAAIW,MAAM,sEAEbZ,KAAKS,UACRT,KAAKU,aAA2BV,KAAKF,YAAyB,cAAEe,cAM5DjB,EAAVU,UAAAI,aAAU,SAAaI,GACnB,GAAIA,GAA6B,EAArBA,EAAKC,OAAOC,OAAY,CAElChB,KAAKH,UAAUoB,YAAYjB,KAAKF,YAAYoB,cAAe,YAAa,IAEvClB,KAAKmB,mBAAmBnB,KAAKoB,QAAQN,IAExEd,KAAKE,eAAemB,QAGdzB,EAAVU,UAAAa,mBAAU,SAAmBG,GAGzB,IAAMC,EAA6BvB,KAAKH,UAAU2B,cAAc,OAChExB,KAAKH,UAAU4B,YAAYzB,KAAKF,YAAYoB,cAAeK,GAC3D,IAAMG,EAA2B1B,KAAKH,UAAU2B,cAAc,QAK9D,OAJAxB,KAAKH,UAAU4B,YAAYF,EAAYG,GAEvC1B,KAAKH,UAAU8B,SAASD,EAAa,aACrCA,EAAYE,UAAY5B,KAAKD,cAAc8B,SAASC,EAAAA,gBAAgBC,KAAMT,GACnEC,GAGD3B,EAAVU,UAAAc,QAAU,SAAQY,GAKd,IAAIC,GAHJD,EAAWA,EAASE,QAAQ,gBAAiB,IACzBA,QAAQ,wBAAyB,KAEtBC,MAAM,MAGjCC,EAA8BH,EAAM,GAAGI,MAAM,aAAa,GAG1DC,EAAkC,IAAIC,OAAO,IAAMH,GAQnDI,GAPJP,EAAQA,EAAMQ,IAAI,SAASC,GACzB,OAAOA,EACJR,QAAQ,MAAO,IACfA,QAAQI,EAAyB,IACjCJ,QAAQ,OAAQ,OAGYS,KAAK,MACrCT,QAAQ,UAAW,MAAMA,QAAQ,UAAW,MAC5CA,QAAQ,SAAU,KAAKA,QAAQ,SAAU,KAGtCU,EAAuBlD,EAAKmD,UAAU7C,KAAKC,SAAUuC,GAAa,GAKtE,OAJAI,EAAgBE,MAAQF,EAAgBE,MACrCZ,QAAQ,yCAA0C,IAClDA,QAAQ,SAAU,IAClBA,QAAQ,UAAW,IACfU,EAAgBE,SArG3B,iBALA,CAAAC,KAACC,EAAAA,UAADC,KAAA,CAAW,CACTC,SAAU,eACVC,OAAQ,CAAC,gtBACTC,SAAU,mEAVZ,CAAAL,KAA4EM,EAAAA,WAA5E,CAAAN,KAAmCO,EAAAA,YACnC,CAAAP,KAASQ,EAAAA,kCAuBT/C,QAAA,CAAA,CAAAuC,KAAGS,EAAAA,MAAHP,KAAA,CAAS,aAcThD,SAAA,CAAA,CAAA8C,KAAGS,EAAAA,MAAHP,KAAA,CAAS,UAMT/C,eAAA,CAAA,CAAA6C,KAAGU,EAAAA,OAAHR,KAAA,CAAU,mBC5CV,IAAAS,EAAA,2BAKA,CAAAX,KAACY,EAAAA,SAADV,KAAA,CAAU,CACRW,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZlE,GAEFmE,QAAS,CACPnE"
}
